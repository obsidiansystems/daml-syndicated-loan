-- | Accounts used in testing
module Scripts.Accounts where

import Daml.Script

import Daml.Finance.Interface.Types.Common.Types (AccountKey, InstrumentKey)
import Daml.Finance.Interface.Holding.Factory qualified as Holding
import Daml.Finance.Interface.Holding.Base qualified as Holding
import Daml.Finance.Interface.Account.Factory qualified as Account
import Workflow.CreateAccount qualified as CreateAccount
import Workflow.CreditAccount qualified as CreditAccount

import Util.Display

-- | Only a subset of the parties involved need to have accounts
-- to exercise the lifecycle of the loan.
-- In particular, the depository/issuer, and underwriters do not
-- need accounts.
data LedgerAccounts = LedgerAccounts with
    aliceAccount : AccountKey
    aliceLoanAccount : AccountKey
    bobAccount : AccountKey
    charlieAccount : AccountKey
    charlieLoanAccount : AccountKey
    debbieAccount : AccountKey
    garyAccount : AccountKey -- Cash account
    garyLoanAccount : AccountKey
    hortenseAccount : AccountKey
    hortenseLoanAccount : AccountKey
  deriving (Show, Eq, Ord)

-- | Holding account dependencies
data AccountConfig = AccountConfig with
  accountFactoryCid : ContractId Account.F
  holdingFactoryCid : ContractId Holding.F
  owner : Party
  custodian : Party

-- | Make and optionally fund an account
makeAndFundAccount
  : InstrumentKey
  -> AccountConfig
  -> Numeric 10
  -> Script (AccountKey, Optional (ContractId Holding.I))
makeAndFundAccount instrument a@AccountConfig{..} amount = do
  account <- makeAccount (display instrument) a
  holdingCid <- if (amount > 0.0)
      then do
        allocationRequestCid <- submit owner do
          createCmd CreditAccount.Request with
            account
            instrument
            amount
        holdingCid <- submit custodian do exerciseCmd allocationRequestCid CreditAccount.Accept
        pure $ Some holdingCid
      else pure None
  return (account, holdingCid)

-- | Create an account using the provided factories. The account is not funded.
makeAccount
  : Text
  -> AccountConfig
  -> Script AccountKey
makeAccount label AccountConfig{..} = do
  accountRequestCid <- submit owner do
    createCmd CreateAccount.Request with
      custodian
      owner
  k <- submit custodian do
    exerciseCmd accountRequestCid CreateAccount.Accept with
        label = show owner <> "@" <> label
        description = "Holding account"
        accountFactoryCid
        holdingFactoryCid
        observers = [custodian]
  log k
  pure k
