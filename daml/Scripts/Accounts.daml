-- | Accounts used in testing
module Scripts.Accounts where

import Daml.Script

import Daml.Finance.Interface.Types.Common.Types (AccountKey, InstrumentKey)
import Daml.Finance.Interface.Holding.Factory qualified as Holding
import Daml.Finance.Interface.Holding.Base qualified as Holding
import Daml.Finance.Interface.Account.Factory qualified as Account
import Workflow.CreateAccount qualified as CreateAccount
import Workflow.CreditAccount qualified as CreditAccount

import Util.Display

-- | Only a subset of the parties involved need to have accounts
-- to exercise the lifecycle of the loan.
-- In particular, the depository/issuer, and underwriters do not
-- need accounts.
data LedgerAccounts = LedgerAccounts with
    aliceAccount : AccountKey
    aliceBondAccount : AccountKey
    bobAccount : AccountKey
    charlieAccount : AccountKey
    debbieAccount : AccountKey
    garyAccount : AccountKey -- Cash account
    garyBondAccount : AccountKey
    hortenseAccount : AccountKey
    hortenseBondAccount : AccountKey
  deriving (Show, Eq, Ord)

-- | Make and optionally fund an account
makeAndFundAccount
  : Party
  -> InstrumentKey
  -> ContractId Account.F
  -> ContractId Holding.F
  -> Party
  -> Numeric 10
  -> Script (AccountKey, Optional (ContractId Holding.I))
makeAndFundAccount custodian instrument accountFactoryCid holdingFactoryCid owner amount = do
  account <- makeAccount (display instrument) accountFactoryCid holdingFactoryCid owner custodian
  holdingCid <- if (amount > 0.0)
      then do
        allocationRequestCid <- submit owner do
          createCmd CreditAccount.Request with
            account
            instrument
            amount

        holdingCid <- submit custodian do exerciseCmd allocationRequestCid CreditAccount.Accept
        pure $ Some holdingCid
      else pure None
  return (account, holdingCid)

makeAccount : Text -> ContractId Account.F -> ContractId Holding.F -> Party -> Party -> Script AccountKey
makeAccount label accountFactoryCid holdingFactoryCid owner custodian = do
  accountRequestCid <- submit owner do
    createCmd CreateAccount.Request with
      custodian
      owner
  k <- submit custodian do
    exerciseCmd accountRequestCid CreateAccount.Accept with
        label = show owner <> "@" <> label
        description = "Holding account"
        accountFactoryCid
        holdingFactoryCid
        observers = [custodian]
  log k
  pure k