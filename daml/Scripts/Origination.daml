module Scripts.Origination where

import DA.Date (date, toGregorian, toDateUTC)
import DA.Foldable
import Daml.Script

import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(Following))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(Y))

import Util.Display
import Workflow.Origination

import Scripts.Origination.LoanApplication
import Scripts.Origination.Mandate
import Scripts.Origination.Offer
import Scripts.Origination.Solicitation
import Scripts.Origination.Underwriting
import Scripts.Parties
import Scripts.PreOrigination

type Amount = Decimal

-- | Data produced by the origination script. This represents the
-- pre-settlement agreement that closes the mandate phase.
data Origination = Origination with
  origLoanAgreement : OriginatedLoanAgreement
  origLoanAgreementCid : ContractId OriginatedLoanAgreement
  originationTime : Time

-- | Full origination process of a loan, from application through to acceptance
-- of a loan offer.
originate : LedgerParties -> PreOrigination -> Script Origination
originate LedgerParties{..} PreOrigination{..} = do
  now <- getTime
  let amount = 10_000_000.00
      rate = RatePerAnnum 0.05 -- 5% per annum
      uuid = "LoanInstrument"
      startDate = toDateUTC now
      (y,m,d) = toGregorian startDate
      schedule = createPaymentPeriodicSchedule
        (date (y+1) m d)
        []
        Following
        Y 1
        startDate
        (date (y+10) m d)
      loanApplicationSubmission = LoanApplicationSubmission with
        borrower = borrower_alice
        agent = agent_charlie
        applicationData = LoanApplicationData with
          instrument = usdInstrument
          amount
          maxInterestRate = rate
          prospectus = "Loan for acquisition of competitor"
          durationYears = 10
          schedule

  -- Loan application proposal and acceptance
  acceptedApplication <- preMandateApplication loanApplicationSubmission uuid

  -- Loan application processing
  (applicationProcess, underwritingResult) <- preMandateProcessing acceptedApplication agent_charlie underwriter_emma

  -- Agent goes back to the borrower with a mandate letter, which borrower accepts
  acceptedMandateLetter <- mandatePhase agent_charlie borrower_alice applicationProcess underwritingResult

  -- Bid solicitation
  let possibleLenders = [lender_gary, lender_hortense]
  fundingInterests <- solicitBids
    agent_charlie
    possibleLenders
    [lender_rue] -- Lenders who decline to participate
    underwritingResult
    acceptedMandateLetter
    amount
    rate

  -- Book building and offer of syndicated loan to borrower
  (fundingSelection, acceptedLoan) <- makeOffer loanApplicationSubmission acceptedMandateLetter fundingInterests

  log "-- Pending Loan Agreement --"
  -- Now that all parties have agreed to their individual terms, the agent constructs the final loan agreement
  -- and gathers the signatures that have been authorized.
  signedPendingLoanAgreement <- submit agent_charlie $
    exerciseCmd applicationProcess LoanApplicationProcess_CreatePendingLoanAgreement with
      borrower_commitment = acceptedLoan
      lender_commitments = fundingSelection.fundingSelection_selected
  logLedger agent_charlie signedPendingLoanAgreement

  -- Agent declines leftover funding interests
  forA_ fundingSelection.fundingSelection_declined $ \declinedCid -> do
    declined <- queryContractId agent_charlie declinedCid
    case declined of
      None -> pure ()
      Some dec -> log $ show dec.agent <> " declines offer from " <> show dec.participant
        <> "\n" <> displayFundingInterestTerms dec
    submit agent_charlie $ exerciseCmd declinedCid FundingInterest_Decline

  -- Agent constructs the final, fully signed loan agreementâ€” ready for settlement
  origLoanAgreementCid <- submit agent_charlie $ exerciseCmd signedPendingLoanAgreement PendingLoanAgreement_Finalize
    with
      now
      routeProviderCid
      settlementFactoryCid
      fixedRateBondFactoryCid

  Some origLoanAgreement <- queryContractId agent_charlie origLoanAgreementCid
  log origLoanAgreement

  log $ "Loan originated at " <> show now
  pure Origination with
    origLoanAgreement
    origLoanAgreementCid
    originationTime = now
