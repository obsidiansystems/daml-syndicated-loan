-- | The "mandate phase": agent offers terms to the borrower based on
-- underwriting results prior to obtaining firm commitments from lenders
module Scripts.Origination.Mandate where

import Daml.Script

import Util.Display
import Workflow.Origination

-- | The mandate phase is an offer/accept from agent to borrower, giving
-- agent authority to solicit the loan from lenders for agreed-upon terms.
mandatePhase
  : Party
  -> Party
  -> ContractId LoanApplicationProcess
  -> ContractId UnderwritingResult
  -> Script (ContractId AcceptedMandateLetter)
mandatePhase agent borrower appProcess underwritingResult = do
  log "-- Mandate Phase --"
  -- Agent goes back to the borrower with a mandate letter offer
  mandateLetterOffer <- submit agent $ exerciseCmd appProcess LoanApplicationProcess_OfferMandateLetter with
    reportCid = underwritingResult
  logLedger agent mandateLetterOffer
  acceptedMandateLetter <- submit borrower $ exerciseCmd mandateLetterOffer MandateLetterOffer_Accept
  logLedger agent acceptedMandateLetter
  pure acceptedMandateLetter
