module Scripts.Settlement where

import Daml.Script

import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id(..), InstrumentKey(..))

import DA.Date (toDateUTC, Month(..), date, toGregorian)
import Daml.Finance.Interface.Types.Date.Calendar qualified as Cal
import Daml.Finance.Interface.Types.Date.RollConvention (Period(..), PeriodEnum(..), RollConventionEnum(..))
import Daml.Finance.Interface.Types.Date.Schedule qualified as Sched
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..))

import Workflow.Servicing (clockUpdateEvent)
import qualified DA.Set as Set
import Daml.Finance.Lifecycle.Rule.Claim as Claim
import Daml.Finance.Interface.Lifecycle.Rule.Claim as ClaimI
--import Daml.Finance.Claims.Lifecycle.Rule as Lifecycle (Rule(..))
import qualified Daml.Finance.Interface.Lifecycle.Rule.Lifecycle as Lifecycle
import qualified DA.Map as Map
import DA.Time (days, time)
import Workflow.Util
import qualified Daml.Finance.Claims.Lifecycle.Rule as Lifecycle

import Tests.Common
import Tests.IDE
import qualified Daml.Finance.Interface.Settlement.RouteProvider as RouteProvider
import qualified Daml.Finance.Settlement.RouteProvider.SingleCustodian as SingleCustodian
import qualified Daml.Finance.Interface.Settlement.Factory as Settlement
import Daml.Finance.Settlement.Factory (observers, provider, Factory(Factory))

-- | Helper container used to transfer state from one script to another.
data SettlementState = SettlementState
  with
    alice : Party
    bank : Party
    bob : Party
    public : Party
    aliceAccount : AccountKey
    bobAccount : AccountKey
    usdInstrument : InstrumentKey
    bondInstrument : InstrumentKey
    bobHoldingCid : ContractId Holding.I
  deriving (Eq, Show)

-- | Create a schedule for periodic payments.
createPaymentPeriodicSchedule : Date -> [Text] -> Cal.BusinessDayConventionEnum -> PeriodEnum ->
  Int -> Date -> Date -> PeriodicSchedule
createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod
  couponPeriodMultiplier issueDate maturityDate = do
    -- CREATE_PERIODIC_SCHEDULE_BEGIN
    let
      (y, m, d) = toGregorian firstCouponDate
      periodicSchedule = PeriodicSchedule with
        businessDayAdjustment =
          Cal.BusinessDayAdjustment with
            calendarIds = holidayCalendarIds
            convention = businessDayConvention
        effectiveDateBusinessDayAdjustment = None
        terminationDateBusinessDayAdjustment = None
        frequency =
          Sched.Periodic Sched.Frequency with
            rollConvention = DOM d
            period = Period with
              period = couponPeriod
              periodMultiplier = couponPeriodMultiplier
        effectiveDate = issueDate
        firstRegularPeriodStartDate = Some firstCouponDate
        lastRegularPeriodEndDate = Some maturityDate
        stubPeriodType = None
        terminationDate = maturityDate
    -- CREATE_PERIODIC_SCHEDULE_END
    periodicSchedule

run : Script ()
run = do
  setTime (time (date 2023 Apr 12) 4 4 4)
  p <- createParties
  po <- preOrigination p
  runBondStep p po
  return ()

-- | Test script that
-- 1. executes the `runTransfer` script
-- 2. creates a token instrument
-- 3. credits a token holding to Alice in her bank account
-- 4. atomically exchanges the token against the cash holding

runBondStep : LedgerParties -> PreOriginationStuff -> Script ()
runBondStep LedgerParties{..} PreOriginationStuff{..} = do
  {-
  -- Execute the `runTransfer` script. Bob now holds USD 1000 in his account.
  TransferState{alice
    , bank
    , bob
    , public
    , aliceAccount
    , bobAccount
    , cashInstrument = usdInstrument
    , holdingFactoryCid
    , newHoldingCid = bobHoldingCid} <- runTransfer
  -}
  -- 1. Create Route Provider
  routeProviderCid <- toInterfaceContractId @RouteProvider.I <$> submit fed_ingrid do
      createCmd SingleCustodian.SingleCustodian with
        provider = fed_ingrid
        observers = Set.fromList [borrower_alice, borrower_bob, lender_gary, lender_hortense]
        custodian = fed_ingrid

  -- 2. Create Settlement Factory
  settlementFactoryCid <- toInterfaceContractId @Settlement.F <$> submit fed_ingrid do
    createCmd Factory with
      provider = fed_ingrid
      observers = Set.fromList [borrower_bob, borrower_alice]

  orig <- origination (LedgerParties{..}) (PreOriginationStuff{..})
  now <- getTime

  let borrower = borrower_alice
      lender = lender_gary
      agent = agent_charlie
      (y',m',d') = toGregorian (toDateUTC now)
      today = date (y'+1) m' d'
      parties = Set.fromList [borrower, lender, agent]
      updateEvent = clockUpdateEvent parties parties today
  updateEventCid <- fmap toInterfaceContractId $
    submitMulti [agent,borrower,lender] [] $ do createCmd updateEvent
  
  {-
  rule <- fmap (toInterfaceContractId @Lifecycle.Lifecycle) $
    submit agent $ createCmd $ Lifecycle.Rule with
      providers = Set.singleton agent
      observers = Map.fromList [("borrower", Set.singleton borrower), ("fed", Set.singleton fed_ingrid)]
      lifecycler = agent
      id = Id "LifecycleRule"
      description = "Rule to lifecycle the bond instrument"
  -}
  
  rule <- fmap (toInterfaceContractId @ClaimI.I) $
    submit agent $ createCmd $ Claim.Rule with
      providers = Set.fromList [agent]
      claimers = Set.singleton lender_gary
      settlers = Set.singleton borrower_alice
      routeProviderCid
      settlementFactoryCid
      netInstructions = False
  
  (newBondOpt, effectCids) <- submitMulti [agent_charlie, borrower_alice] [] $
    exerciseCmd rule Lifecycle.Evolve with
      eventCid = updateEventCid
      observableCids = []
      instrument = orig.bond.reference

  case newBondOpt of
    None -> debug "NO NEW STUFF"
    Some b -> debug $ show b

  return ()
