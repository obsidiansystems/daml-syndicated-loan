module Tests.Common where

{-
  ALL Functions in the file should have a type signature of LedgerParties -> Script a, this is because
  DAML Hub cannot create parties via DAML Scripts. The local LSP can, but we want to be able to test
  against a live non-stateless ledger
-}

import DA.Action
import DA.Foldable
import DA.Map (empty)
import qualified DA.Map as Map
import qualified DA.Set as S
import Daml.Script

import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory (..))
import Daml.Finance.Interface.Account.Factory qualified as Account (F)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Holding.Fungible (Fungible, Fungible, SplitResult(SplitResult))
import Daml.Finance.Interface.Holding.Transferable (Transfer)
import Daml.Finance.Interface.Instrument.Base.Instrument (exerciseInterfaceByKey)
import Daml.Finance.Interface.Lifecycle.Rule.Claim as ClaimI
import Daml.Finance.Interface.Types.Common.Types
import Daml.Finance.Lifecycle.Rule.Claim as Claim
import Daml.Finance.Settlement.Factory (Factory(..))
import qualified Daml.Finance.Holding.Fungible as FungibleX
import qualified Daml.Finance.Holding.Fungible as FungibleX
import qualified Daml.Finance.Interface.Holding.Base as B
import qualified Daml.Finance.Interface.Holding.Fungible as Fungible
import qualified Daml.Finance.Interface.Instrument.Base.Instrument as BaseInstrument
import qualified Daml.Finance.Interface.Settlement.Factory as Settlement
import qualified Daml.Finance.Interface.Settlement.RouteProvider as RouteProvider
import qualified Daml.Finance.Settlement.RouteProvider.SingleCustodian as SingleCustodian

import Workflow.CreateAccount qualified as CreateAccount
import Workflow.CreditAccount qualified as CreditAccount
import Workflow.Origination
import qualified Daml.Finance.Interface.Holding.Fungible as Fungible
import Daml.Finance.Interface.Holding.Fungible (I, Fungible, Fungible, SplitResult(SplitResult))
import qualified Daml.Finance.Interface.Holding.Base as B
import Workflow.SettlementProposal
import Workflow.Transfer qualified as Transfer
import Workflow.Util
import qualified Daml.Finance.Interface.Settlement.Instruction as Instruction
import Daml.Finance.Interface.Settlement.Instruction (GetView(GetView))
import Daml.Finance.Interface.Settlement.Types (Allocation(Pledge))

-- | Parties representing various agents in the syndicated loan workflow
-- Each type of agent has two representatives so that we can test disclosure
-- and divulgence.
data LedgerParties = LedgerParties with
    borrower_alice : Party
    borrower_bob : Party
    agent_charlie : Party
    agent_debbie : Party
    underwriter_emma : Party
    underwriter_fred : Party
    lender_gary : Party
    lender_hortense : Party
    fed_ingrid : Party
  deriving (Show, Eq, Ord)

-- | Test that does not exercise the lending workflow as such, but
-- exercises transfers on the ledger to help us estimate throughput
-- of our settlement strategy.
perfTest : LedgerParties -> Script ()
perfTest LedgerParties{..} = do
    let instrumentId = Id "USD"
        instrumentVersion = "0"
        usdInstrument = InstrumentKey with
          issuer = fed_ingrid
          depository = fed_ingrid
          id = instrumentId
          version = instrumentVersion

    accountFactoryCid <- toInterfaceContractId @Account.F <$> submit fed_ingrid do
      createCmd Account.Factory with provider = fed_ingrid; observers = empty

    holdingFactoryCid <- toInterfaceContractId @Holding.F <$> submit fed_ingrid do
      createCmd Fungible.Factory with
        provider = fed_ingrid
        observers = empty

    aliceReq <- submit borrower_alice do
      createCmd CreateAccount.Request with owner = borrower_alice; custodian = fed_ingrid
    aliceAccount <- submit fed_ingrid do
      exerciseCmd aliceReq CreateAccount.Accept with
        label = "Alice@Fed"
        description = "null"
        accountFactoryCid = accountFactoryCid
        holdingFactoryCid
        observers = []
    requestMon <- submit borrower_alice do
        createCmd CreditAccount.Request with
          account = aliceAccount
          instrument = InstrumentKey with
            issuer = fed_ingrid
            depository = fed_ingrid
            id = instrumentId
            version = instrumentVersion
          amount = 100000.0
    xv <- submit fed_ingrid do exerciseCmd requestMon CreditAccount.Accept
    SplitResult{..} <- submit borrower_alice do
      exerciseCmd (coerceInterfaceContractId @Fungible xv) Fungible.Split with
        amounts = replicate 100 5.0

    accountkeys <- forA [1..100] $ \x -> do
      requestCid <- submit lender_hortense do
        createCmd CreateAccount.Request with owner = lender_hortense; custodian = fed_ingrid
      c <- submit fed_ingrid $ do
        exerciseCmd requestCid CreateAccount.Accept with
          label = (show x)
          description = "null"
          accountFactoryCid
          holdingFactoryCid
          observers = [borrower_alice]
      pure (c)
    pure ()

    let xd = zip accountkeys splitCids
    forA_ xd $ \(a, b) -> do
      x <- submit lender_hortense $ do
        createCmd Transfer.Request with
          receiverAccount = a
          instrument = usdInstrument
          currentOwner = borrower_alice
          amount = 5.0
      submit borrower_alice $ exerciseCmd x Transfer.Accept with
        holdingCid = (coerceInterfaceContractId @B.Base b)

initialTest : LedgerParties -> Script ()
initialTest parties = do
  stuff <- preOrigination parties
  originationData <- origination parties stuff
  -- servicing parties originationData
  pure ()

-- | Information required for denominating the loans
-- and settling payments.
data PreOriginationStuff = PreOriginationStuff with
  usdInstrument : InstrumentKey
  ledgerAccounts : LedgerAccounts
  hortenseCashHoldingCid : ContractId B.I
  garyCashHoldingCid : ContractId B.I

-- | Only a subset of the parties involved need to have accounts
-- to exercise the lifecycle of the loan.
-- In particular, the depository/issuer, and underwriters do not
-- need accounts.
data LedgerAccounts = LedgerAccounts with
    aliceAccount : AccountKey
    bobAccount : AccountKey
    charlieAccount : AccountKey
    debbieAccount : AccountKey
    garyAccount : AccountKey
    hortenseAccount : AccountKey
  deriving (Show, Eq, Ord)

-- Pre-origination set-up script that creates:
-- - the asset in which the loans will be denominated
-- - the issuer and depository for the asset (for simplicity, they are the same party)
-- - the accounts for the agents, lenders, and borrowers
-- - initial assets for the lenders
preOrigination : LedgerParties -> Script PreOriginationStuff
preOrigination LedgerParties{..} = do
    -- Create the Fed

    -- Create USD
    let instrumentId = Id "USD"
        instrumentVersion = "0"
        usdInstrument = InstrumentKey with
          issuer = fed_ingrid
          depository = fed_ingrid
          id = instrumentId
          version = instrumentVersion

    -- Create USD Accounts for Banks and Companies
    accountFactoryCid <- toInterfaceContractId @Account.F <$> submit fed_ingrid do
      createCmd Account.Factory with provider = fed_ingrid; observers = empty

    holdingFactoryCid <- toInterfaceContractId @Holding.F <$> submit fed_ingrid do
      createCmd Fungible.Factory with
        provider = fed_ingrid
        observers = empty -- fromList [("PublicObserver", singleton public )] -- TODO: Probably wont need this

    -- ...for Hortenses's Bank
    hortenseRequestCid <- submit lender_hortense do
      createCmd CreateAccount.Request with owner = lender_hortense; custodian = fed_ingrid

    hortenseAccount <- submit fed_ingrid do
      exerciseCmd hortenseRequestCid CreateAccount.Accept with
        label = "Hortense@Bank"
        description = "Account of Hortense at Bank"
        accountFactoryCid = accountFactoryCid
        holdingFactoryCid
        observers = []

    -- allocate funds to Hortense
    hortenseRequestCid <- submit lender_hortense do
      createCmd CreditAccount.Request with
        account = hortenseAccount
        instrument = usdInstrument
        amount = 100_000_000.00

    hortenseCashHoldingCid <- submit fed_ingrid do exerciseCmd hortenseRequestCid CreditAccount.Accept

    -- ...for Gary's Bank
    garyRequestCid <- submit lender_gary do
      createCmd CreateAccount.Request with owner = lender_gary; custodian = fed_ingrid
    garyAccount <- submit fed_ingrid do
      exerciseCmd garyRequestCid CreateAccount.Accept with
        label = "Gary@Bank"
        description = "Account of Bob at Bank"
        accountFactoryCid = accountFactoryCid
        holdingFactoryCid = holdingFactoryCid
        observers = []

    -- allocate funds to Gary
    garyRequestCid <- submit lender_gary do
      createCmd CreditAccount.Request with
        account = garyAccount
        instrument = usdInstrument
        amount = 50_000_000.00

    garyCashHoldingCid <- submit fed_ingrid do exerciseCmd garyRequestCid CreditAccount.Accept

    -- ...for Bob's Company
    bobRequestCid <- submit borrower_bob do
      createCmd CreateAccount.Request with owner = borrower_bob; custodian = fed_ingrid
    bobAccount <- submit fed_ingrid do
      exerciseCmd bobRequestCid CreateAccount.Accept with
        label = "Bob@Fed"
        description = "Account of Bob at Bank"
        accountFactoryCid = accountFactoryCid
        holdingFactoryCid = holdingFactoryCid
        observers = []

    -- ...for Alice's Company
    aliceRequestCid <- submit borrower_alice do
      createCmd CreateAccount.Request with owner = borrower_alice; custodian = fed_ingrid
    aliceAccount <- submit fed_ingrid do
      exerciseCmd aliceRequestCid CreateAccount.Accept with
        label = "Alice@Bank"
        description = "Account of Alice at Bank"
        accountFactoryCid = accountFactoryCid
        holdingFactoryCid = holdingFactoryCid
        observers = []

    -- ...for Charlie's agency
    charlieRequestCid <- submit agent_charlie do
      createCmd CreateAccount.Request with owner = agent_charlie; custodian = fed_ingrid
    charlieAccount <- submit fed_ingrid do
      exerciseCmd charlieRequestCid CreateAccount.Accept with
        label = "Charlie@Bank"
        description = "Account of Charlie at Bank"
        accountFactoryCid = accountFactoryCid
        holdingFactoryCid = holdingFactoryCid
        observers = []

    -- ...for Debbie's agency
    debbieRequestCid <- submit agent_debbie do
      createCmd CreateAccount.Request with owner = agent_debbie; custodian = fed_ingrid
    debbieAccount <- submit fed_ingrid do
      exerciseCmd debbieRequestCid CreateAccount.Accept with
        label = "Debbie@Bank"
        description = "Account of Debbie at Bank"
        accountFactoryCid = accountFactoryCid
        holdingFactoryCid = holdingFactoryCid
        observers = []

    let ledgerAccounts = LedgerAccounts with ..
    return $ PreOriginationStuff with
      usdInstrument
      ledgerAccounts
      hortenseCashHoldingCid
      garyCashHoldingCid

data Origination = Origination with
  loanAgreement : LoanAgreement
  loanAgreementCid : ContractId LoanAgreement
  bond : Bond
  bondRef : InstrumentKey
  bondCid : ContractId (BaseInstrument.I)
  amount : Decimal

origination : LedgerParties -> PreOriginationStuff -> Script LoanAgreement
origination LedgerParties{..} PreOriginationStuff{..} = do
  let amount = 10_000_000.00
      rate = RatePerAnnum 0.05 -- 5% per annum
      uuid = "golden"
      loanApplication = LoanApplication with
        borrower = borrower_alice
        agent = agent_charlie
        instrument = usdInstrument
        amount
        maxInterestRate = rate
        prospectus = "To test the syndicated loans framework :)"
        durationYears = 10
  -- Borrower submits an application for a loan
  application <- submit borrower_alice $ createCmd loanApplication
  -- Agent coordinating the lending first asks an underwriter for a report
  underwritingRequest <- submit agent_charlie (makeUnderwritingRequest underwriter_emma uuid application)
  underwritingResult <- makeUnderwritingResult underwriter_emma underwritingRequest
  -- Agent with underwriter's report in hand reaches out to possible lenders
  let possibleLenders = [lender_gary, lender_hortense]
  forA_ possibleLenders $ \lender -> do
    makeFundingRequest agent_charlie amount underwritingResult lender
  -- Lenders make their offers
  -- TODO: Lenders declining to make an offer
  fundingInterestCids <- forA possibleLenders $ \lender -> do
    [(fundingRequestCid, fundingRequest)] <- getFundingRequestsFor lender
    submit lender $ makeFundingInterest lender fundingRequestCid (amount, rate)
  fundingInterests <- forA fundingInterestCids $ \cid -> do
    Some fundingInterest <- queryContractId agent_charlie cid
    pure (cid, fundingInterest)
  -- Agent takes all lending offers and constructs a loan offer for the borrower to consider
  (rate, selectedFundingInterests) <- selectFundingInterests fundingInterests
  loanProposal <- submit agent_charlie $ createLoanProposal application uuid rate
  acceptedLoan <- acceptLoanProposal borrower_alice loanProposal
  -- Now that all parties have agreed to their individual terms, the agent constructs the final loan agreement
  -- and gathers the signatures that have been authorized.
  pendingAgreement <- createPendingLoanAgreement agent_charlie acceptedLoan selectedFundingInterests
  borrowerSigned <- submit agent_charlie $ do
    exerciseCmd acceptedLoan $ AcceptedLoan_SignAgreement with
      agreementCid = pendingAgreement
  lendersSigned <- foldlA
    (\agreementCid fundingInterestCid -> submit agent_charlie $ exerciseCmd fundingInterestCid FundingInterest_SignAgreement with agreementCid)
    borrowerSigned
    selectedFundingInterests
  -- Agent constructs the final, fully signed loan agreement— ready for settlement
  (loanAgreementCid, bond) <- submit agent_charlie $ exerciseCmd lendersSigned PendingLoanAgreement_Finalize
  Some loanAgreement <- queryContractId agent_charlie loanAgreementCid
  pure loanAgreement

type Amount = Decimal

makeUnderwritingResult
    : Party
    -> ContractId UnderwritingRequest
    -> Script (ContractId UnderwritingResult)
makeUnderwritingResult underwriter requestCid = do
    submit underwriter $ exerciseCmd requestCid CreateUnderwritingResult with
      result = True

makeFundingRequest
    : Party
    -> Decimal
    -> ContractId UnderwritingResult
    -> Party
    -> Script (ContractId FundingRequest)
makeFundingRequest agent amount underwriteCid lender = do
    Some underwrite <- queryContractId agent underwriteCid
    disclosedUnderwriting <- submit agent $ exerciseCmd underwriteCid UnderwritingResult_Disclose with
        disclose_to = lender
    submit agent $ createCmd FundingRequest with
        agent
        uuid = "golden" -- TODO: Thread these through
        underwrite = disclosedUnderwriting
        participant = lender
        totalApplicationAmount = amount

getFundingRequestsFor : Party -> Script [(ContractId FundingRequest, FundingRequest)]
getFundingRequestsFor lender = query @FundingRequest lender

-- TODO: Actually make a decision about amount and rate
makeFundingInterest : Party -> ContractId FundingRequest -> (Decimal, RatePerAnnum) -> Commands (ContractId FundingInterest)
makeFundingInterest lender requestCid (amount, rate) = exerciseCmd requestCid FundingRequest_Respond with
    amount
    rate

makeUnderwritingRequest : Party -> Text -> ContractId LoanApplication -> Commands (ContractId UnderwritingRequest)
makeUnderwritingRequest underwriter uuid applicationCid = exerciseCmd applicationCid LoanApplication_CreateUnderwritingRequest with
  underwriter
  uuid

-- TODO: combine the list of FundingInterest instead of just taking the first element
selectFundingInterests : [(ContractId FundingInterest, FundingInterest)] -> Script (RatePerAnnum, [ContractId FundingInterest])
selectFundingInterests ((offerCid, offer)::interests) = pure (offer.rate, [offerCid])
selectFundingInterests [] = fail "No interests to fund loan"

createPendingLoanAgreement : Party -> ContractId AcceptedLoan -> [ContractId FundingInterest] -> Script (ContractId PendingLoanAgreement)
createPendingLoanAgreement agent acceptanceCid fundingCids = do
  Some acceptance <- queryContractId agent acceptanceCid
  lendersWithAmounts <- forA fundingCids $ \offerCid -> do
    Some loanOffer <- queryContractId agent offerCid
    pure (loanOffer.participant, loanOffer.amount)
  let agreement = LoanAgreement with
        agent
        participantsWithAmounts = Map.fromList lendersWithAmounts
        borrower = acceptance.borrower
        uuid = "golden" -- TODO: Thread these through
        prospectus = "uhhh" -- TODO: Get this
        loanTerms = LoanTerms with
          instrument = acceptance.instrument
          amount = acceptance.amount
          rate = acceptance.rate
          durationYears = 10 -- TODO: Get this

  submit agent $ createCmd PendingLoanAgreement with
    agreement
    signed = []

createLoanProposal : ContractId LoanApplication -> Text -> RatePerAnnum -> Commands (ContractId SyndicatedLoanOffer)
createLoanProposal applicationCid uuid rate = exerciseCmd applicationCid LoanApplication_CreateOffer with
  uuid
  rate

acceptLoanProposal : Party -> ContractId SyndicatedLoanOffer -> Script (ContractId AcceptedLoan)
acceptLoanProposal borrower offerCid = do
  submit borrower $ exerciseCmd offerCid SyndicatedLoanOffer_Accept

servicing : LedgerParties -> Origination -> Script ()
servicing LedgerParties{..} origination = do
  {-
  rule <- fmap (toInterfaceContractId @ClaimI.I) $
    submit agent $ createCmd $ Claim.Rule with
      providers = Set.fromList [agent, bob]
      claimers = bob
      settlers = bob
      Claim.routeProviderCid = routeProviderCid
      settlementFactoryCid
      netInstructions
  -}
  pure ()

settleLoan : LedgerParties -> LoanAgreement -> Script ()
settleLoan LedgerParties {..} loanAgreement = do
  -- 1. Create Route Provider
  routeProviderCid <- toInterfaceContractId @RouteProvider.I <$> submit fed_ingrid do
      createCmd SingleCustodian.SingleCustodian with
        provider = fed_ingrid
        observers = S.fromList [borrower_alice, borrower_bob, lender_gary, lender_hortense]
        custodian = fed_ingrid

  -- 2. Create Settlement Factory
  settlementFactoryCid <- toInterfaceContractId @Settlement.F <$> submit fed_ingrid do
    createCmd Factory with
      provider = fed_ingrid
      observers = S.fromList [borrower_bob, borrower_alice]


  -- 3. Generate Settlement Proposal
  settlementProposalCid <- submit agent_charlie do
    createCmd SettlementProposal with
      loan = loanAgreement
      sigAccumulator = []
      routeProviderCid
      settlementFactoryCid

  -- Get sig of participating lender
  _ <- submit lender_gary do
    exerciseCmd settlementProposalCid $ Accept_Lender lender_gary

  -- Get sig of participating lender
  _ <- submit lender_hortense do
    exerciseCmd settlementProposalCid $ Accept_Lender lender_hortense

  -- Get sig of participating borrower, all signatures should have been accumulated, tx instructions should be produced
  -- TODO: Should case to ensure it actually is 'Some' instead of 'None'
  Some (containerCid, instructionCids) <- submit borrower_alice do
    exerciseCmd settlementProposalCid Accept_Borrower

  -- Prepare to construct Allocate instructions
  -- let instructions : Update [Instruction.I] = mapA (\icid -> fetch icid) instructionCids
  instructionViews <- forA instructionCids $ \icid -> do
    iv <- submit agent_charlie $ exerciseCmd icid GetView with viewer = agent_charlie
    pure (icid, iv)
  let routedSteps = map (\(icid, iv) -> (icid, iv.routedStep)) instructionViews

  -- TODO: initiate Map Party (ContractId Holding)
  let partyHoldingsMap = Map.empty

  allocatedSettleInstructions <- forA routedSteps $ \(icid, routedStep) -> submit agent_charlie do
    let Some receiverHoldingCid = Map.lookup routedStep.receiver partyHoldingsMap
    exerciseCmd icid Instruction.Allocate with
      actors = S.singleton agent_charlie
      allocation = Pledge receiverHoldingCid

  -- WIP:
  -- approvedRecSettleInstructionCid <- submit bob do
  --   exerciseCmd allocatedRecSettleInstructionCid Instruction.Approve with
  --     actors = S.singleton bob
  --     approval = TakeDelivery bobAccount

  return ()

createRouteProvider : LedgerParties -> Script (ContractId RouteProvider.I)
createRouteProvider LedgerParties {..} = do
  -- 1. Create Route Provider
  toInterfaceContractId @RouteProvider.I <$> submit fed_ingrid do
      createCmd SingleCustodian.SingleCustodian with
        provider = fed_ingrid
        observers = S.fromList [borrower_alice, borrower_bob]
        custodian = fed_ingrid
