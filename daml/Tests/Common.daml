module Tests.Common where

import Daml.Script
import Daml.Finance.Interface.Types.Common.Types

-- | Parties representing various agents in the syndicated loan workflow
-- Each type of agent has two representatives so that we can test disclosure
-- and divulgence.
data LedgerParties = LedgerParties with
    borrower_alice : Party
    borrower_bob : Party
    agent_charlie : Party
    agent_debbie : Party
    underwriter_emma : Party
    underwriter_fred : Party
    lender_gary : Party
    lender_hortense : Party
    fed_ingrid : Party
  deriving (Show, Eq, Ord)

initialTest : LedgerParties -> Script ()
initialTest parties = pure ()

-- Pre-origination
preOrigination : LedgerParties -> Script ()
preOrigination LedgerParties{..}= do
    -- Create the Fed
    
    -- Create USD
    let instrumentId = Id "USD"
        instrumentVersion = "0"
        usdInstrument = InstrumentKey with
          issuer = fed_ingrid
          depository = fed_ingrid
          id = instrumentId
          version = instrumentVersion

    -- Create USD Accounts for Banks and Companies

    return ()
