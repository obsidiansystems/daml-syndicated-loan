module Tests.FailedUnderwriting where

import DA.Date (date, toGregorian, toDateUTC)
import Daml.Script

import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(Following))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(Y))

import Util.Display
import Workflow.Origination

import Scripts.Origination.LoanApplication
import Scripts.Parties
import Scripts.PreOrigination

failedUnderwriting : Script ()
failedUnderwriting = do
  parties <- createParties
  preOriginationResult <- preOrigination parties
  originateWithFailedUnderwriting parties preOriginationResult

-- | Begin originating, but have the underwriting fail
originateWithFailedUnderwriting : LedgerParties -> PreOrigination -> Script ()
originateWithFailedUnderwriting LedgerParties{..} PreOrigination{..} = do
  now <- getTime
  let amount = 10_000_000.00
      rate = RatePerAnnum 0.05 -- 5% per annum
      uuid = "LoanInstrument"
      startDate = toDateUTC now
      (y,m,d) = toGregorian startDate
      schedule = createPaymentPeriodicSchedule
        (date (y+1) m d)
        []
        Following
        Y 1
        startDate
        (date (y+10) m d)
      loanApplicationSubmission = LoanApplicationSubmission with
        borrower = borrower_alice
        agent = agent_charlie
        applicationData = LoanApplicationData with
          instrument = usdInstrument
          amount
          maxInterestRate = rate
          prospectus = "Loan for acquisition of competitor"
          schedule

  -- Loan application proposal and acceptance
  acceptedApplication <- preMandateApplication loanApplicationSubmission uuid

  -- Loan application processing
  (applicationProcess, underwritingResult) <- preMandateProcessingWithFailedUnderwriting acceptedApplication agent_charlie underwriter_emma

  log "-- Mandate Phase --"
  -- Agent goes back to the borrower with a mandate letter offer
  submitMustFail agent_charlie $ exerciseCmd applicationProcess LoanApplicationProcess_OfferMandateLetter with
    reportCid = underwritingResult

  pure ()

preMandateProcessingWithFailedUnderwriting : ContractId AcceptedLoanApplication -> Party -> Party -> Script (ContractId LoanApplicationProcess, ContractId UnderwritingResult)
preMandateProcessingWithFailedUnderwriting acceptedApp agent underwriter = do
  log "-- Pre-Mandate Application Processing --"
  -- Agent kicks off the loan application process
  applicationProcess <- submit agent $ exerciseCmd acceptedApp AcceptedLoanApplication_StartProcess
  logLedger agent applicationProcess
  -- Agent coordinating the lending first asks an underwriter for a report
  underwritingRequest <- submit agent $ exerciseCmd applicationProcess LoanApplicationProcess_CreateUnderwritingRequest with
    underwriter = underwriter
  logLedger agent underwritingRequest
  underwritingResult <- makeFailedUnderwritingResult underwriter underwritingRequest
  logLedger underwriter underwritingResult
  pure (applicationProcess, underwritingResult)

makeFailedUnderwritingResult
    : Party
    -> ContractId UnderwritingRequest
    -> Script (ContractId UnderwritingResult)
makeFailedUnderwritingResult underwriter requestCid = do
    submit underwriter $ exerciseCmd requestCid CreateUnderwritingResult with
      result = False
