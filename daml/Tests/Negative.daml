module Tests.Negative where

import DA.Date
import DA.Foldable
import DA.Set qualified as Set
import DA.Text qualified as T

import Daml.Script
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayConventionEnum(Following))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum(Y))

import Scripts.Origination.Offer
import Scripts.Parties
import Scripts.PreOrigination
import Workflow.Origination
import Tests.Common
import Util.Display

originationTests : LedgerParties -> PreOrigination -> Script (ContractId OriginatedLoanAgreement)
originationTests ps@LedgerParties{..} PreOrigination{..} = do
    now <- getTime
    let startDate = toDateUTC now
        (y,m,d) = toGregorian startDate
        schedule = createPaymentPeriodicSchedule
            (date (y+1) m d)
            []
            Following
            Y 1
            startDate
            (date (y+10) m d)
        aliceApplicationData = LoanApplicationData with
            instrument = usdInstrument
            amount = 12_345_678.00
            maxInterestRate = RatePerAnnum 0.05 -- 5% per annum
            prospectus = "To validate the syndicated loans framework :)"
            schedule

        aliceLoanApplication = LoanApplicationSubmission with
            borrower = borrower_alice
            agent = agent_charlie
            applicationData = aliceApplicationData

    log "-- Negative Tests --"
    -- Workflow for Alice to submit a loan
    test "Bob cannot submit an application for Alice" $
      submitMustFail borrower_bob $ createCmd aliceLoanApplication

    -- Alice submits her application

    aliceSubmittedApplicationCid <- submit borrower_alice $ createCmd aliceLoanApplication
    -- Only alice and her agent charlie should be able to see the application
    testVisibility "LoanApplicationSubmission" ps [ borrower_alice, agent_charlie ] aliceSubmittedApplicationCid

    -- Charlie accepts the application, they are the only one who is able to do so
    -- They use a uuid to keep track of alice's application through the workflow
    let aliceApplicationUuid = "negative_alice"
    aliceApplicationCid <- testExercise ps agent_charlie aliceSubmittedApplicationCid LoanApplicationSubmission_Accept with
        uuid = aliceApplicationUuid

    -- It is the case that only alice and charlie can see the accepted application
    testVisibility "Alice's AcceptedApplication" ps [ borrower_alice, agent_charlie ] aliceApplicationCid

    -- To maintain the privacy of the underwriters and the lenders, Charlie kicks off a workflow not involving the borrower as a signatory
    -- Later on, we will ensure that the loan agreement corresponds with the application Alice submitted.
    aliceApplicationProcessCid <- testExercise ps agent_charlie aliceApplicationCid AcceptedLoanApplication_StartProcess
    testVisibility "LoanApplicationProcess" ps [ agent_charlie ] aliceApplicationProcessCid

    -- Charlie submits alice's application to an underwriter— NO ONE else has
    -- the authority to do so.
    --
    -- NOTE: This emits a divulgence warning as Alice is a witness to the creation of the loan application process,
    -- but she cannot exercise the choice all the same. Moreover, she is not aware of any underwriting requests
    -- made through this exercise.
    aliceUnderwritingRequestCid <- testExercise ps agent_charlie aliceApplicationProcessCid LoanApplicationProcess_CreateUnderwritingRequest with
        underwriter = underwriter_emma
    -- The underwriter does not see the original application
    testVisibility "Alice's AcceptedLoanApplication" ps [ borrower_alice, agent_charlie ] aliceApplicationCid
    -- Nor does alice see the underwriting request
    testVisibility "UnderwritingRequest" ps [ agent_charlie, underwriter_emma ] aliceUnderwritingRequestCid

    -- The underwriter produces a result, in this case, they approve Alice's loan
    -- Note that they are the only one with the authority to exercise this choice.
    aliceUnderwritingCid <- testExercise ps underwriter_emma aliceUnderwritingRequestCid CreateUnderwritingResult with
      result = True
    -- The report is only visible to the underwriter and the agent who requested it
    testVisibility "UnderwritingResult" ps [ agent_charlie, underwriter_emma ] aliceUnderwritingCid

    -- With the report in hand, Charlie is prepared to make an offer to Alice.
    --
    -- NOTE: This emits a divulgence warning just as above. However, Alice can only see the application process contract,
    -- not anything underlying the underwriting process.
    aliceMandateLetterOfferCid <- testExercise ps agent_charlie aliceApplicationProcessCid LoanApplicationProcess_OfferMandateLetter with
        reportCid = aliceUnderwritingCid
    testVisibility "MandateLetterOffer" ps [ borrower_alice, agent_charlie ] aliceMandateLetterOfferCid

    -- Alice accepts the offer
    aliceMandateLetterCid <- testExercise ps borrower_alice aliceMandateLetterOfferCid MandateLetterOffer_Accept
    testVisibility "AcceptedMandateLetter" ps [ borrower_alice, agent_charlie ] aliceMandateLetterCid

    -- With the consent of the borrower in hand, Charlie can disclose the underwriting report to the lenders,
    -- and request funding based on the report.
    let prospectiveLenders = [ lender_gary, lender_hortense ]
    
    -- To prevent the borrower from knowing which lenders were approached with requests for funding, we use a token
    -- proving that they have consented, without revealing the details of the application or the underwriting.
    --
    -- NOTE: The existence of the token is divulged to the underwriter, but nothing else.
    aliceMandateLetterTokenCid <- testExercise ps agent_charlie aliceMandateLetterCid AcceptedMandateLetter_CreateToken
    testVisibility "AcceptedMandateLetterToken" ps [borrower_alice, agent_charlie] aliceMandateLetterTokenCid

    fundingRequests <- forA prospectiveLenders $ \lender -> do
        disclosedUnderwritingReportCid <- testExercise ps agent_charlie aliceUnderwritingCid UnderwritingResult_Disclose with
            disclose_to = lender
            mandateLetterTokenCid = aliceMandateLetterTokenCid
        -- only charlie, the underwriter and this specific lender can see this disclosure
        -- NOTE: We would prefer for the underwriter to not sign the disclosure, so that funding requests
        -- are not divulged to them. What would be better is to keep track of the token which authorizes the disclosure,
        -- and ensure retrospectively at closing time that the agent did not forge the disclosure out of thin air.
        testVisibility "UnderwritingDisclosure" ps [lender, agent_charlie, underwriter_emma] disclosedUnderwritingReportCid
        fundingRequestCid <- testExercise ps agent_charlie disclosedUnderwritingReportCid MakeFundingRequest with
            requestee = lender
        -- only charlie and this specific lender can see this request
        testVisibility "FundingRequest" ps [lender, agent_charlie] fundingRequestCid

        pure (lender, fundingRequestCid)

    -- The lenders now consider their respective requests, and make commitments about how much they are willing to lend
    -- Here we will contrive some differing offers.
    fundingInterests <- forA fundingRequests $ \(lender, requestCid) -> do
        Some request <- queryContractId lender requestCid
        Some report <- queryContractId lender request.reportCid
        let RatePerAnnum maxRate = report.report.maxInterestRate
            (amount, rate)
                | lender == lender_gary = (request.totalApplicationAmount / 3.0 + 1.0, RatePerAnnum (maxRate - 0.005))
                | lender == lender_hortense = (request.totalApplicationAmount / 1.5 + 1.0, RatePerAnnum maxRate)
                | otherwise = (request.totalApplicationAmount, RatePerAnnum maxRate)
        cid <- testExercise ps lender requestCid FundingRequest_Respond with
            amount
            rate
        -- for convenience we will also pull the contents of the funding interest here
        Some c <- queryContractId agent_charlie cid
        pure (cid, c)

    -- Now that Charlie has some funding interest, they can construct a book and propose a loan to alice
    -- Note that this will likely be done OFF ledger.
    let FundingSelection{..} = selectFundingInterests aliceLoanApplication fundingInterests

    -- Charlie makes an offer to Alice that meets both Alice's requirements, and those of the lenders
    aliceLoanOfferCid <- testExercise ps agent_charlie aliceMandateLetterCid AcceptedMandateLetter_CreateOffer with
        rate = fundingSelection_ratePerAnnum
    -- At this point, only the agent and the borrower are aware of the loan offer
    testVisibility "SyndicatedLoanOffer" ps [borrower_alice, agent_charlie] aliceLoanOfferCid
    -- Even when Alice accepts the loan offer, it is not yet visible to other parties.
    aliceAcceptedLoanOfferCid <- testExercise ps borrower_alice aliceLoanOfferCid SyndicatedLoanOffer_Accept
    testVisibility "AcceptedLoanOffer" ps [borrower_alice, agent_charlie] aliceAcceptedLoanOfferCid

    -- With the assent of all parties with consideration, the agent can produce the signed loan agreement, pending settlement details
    signedPendingLoanAgreementCid <- testExercise ps agent_charlie aliceApplicationProcessCid LoanApplicationProcess_CreatePendingLoanAgreement with
        borrower_commitment = aliceAcceptedLoanOfferCid
        lender_commitments = fundingSelection_selected
    testVisibility "PendingLoanAgreement" ps [borrower_alice, agent_charlie, lender_gary, lender_hortense] signedPendingLoanAgreementCid

    -- Finalize the loan with settlement details! Only the agent can finalize the agreement.
    -- NOTE: This produces a divulgence warning because the borrower can see the application process— and nothing more.
    originatedLoanCid <- testExercise ps agent_charlie signedPendingLoanAgreementCid PendingLoanAgreement_Finalize with
      now
      routeProviderCid
      settlementFactoryCid
      fixedRateBondFactoryCid
    testVisibility "OriginatedLoanAgreement" ps [borrower_alice, agent_charlie, lender_gary, lender_hortense] originatedLoanCid

    -- Ideally these would be cleaned up upon origination, but this data is otherwise not necessary to include there
    testExercise ps agent_charlie aliceMandateLetterCid AcceptedMandateLetter_Burn
    -- NOTE: This produces a divulgence warning because the underwriter can see the token— and nothing more.
    testExercise ps agent_charlie aliceMandateLetterTokenCid AcceptedMandateLetterToken_Burn
    pure originatedLoanCid


-- Explicitly deconstruct the ledger parties so that if it changes, we notice to include them
partiesList : LedgerParties -> [Party]
partiesList = Set.toList . allParties

-- | Given a contract and a set of parties who should be able to view the contract,
-- confirms that this is the case and moreover, the other parties of the test script
-- cannot see the contract.
--
-- Note that this tests visibility by *querying*. Fetching could still succeed if
-- divulgence is in play. In order to test divulgence, we must attempt to exercise
-- a contract or fetch it within a transaction.
testVisibility
    : (HasTemplateTypeRep c, HasFromAnyTemplate c, HasToAnyTemplate c, HasAgreement c)
    => Text
    -> LedgerParties
    -> [Party] -- ^ Who should be able to see the contract?
    -> ContractId c
    -> Script ()
testVisibility label ps shouldSee cid = do
    let shouldNotSee = filter (`Prelude.notElem` shouldSee) (partiesList ps)
    let go = do
            forA_ shouldSee $ \party -> do
                Some _ <- queryContractId party cid
                pure ()
            forA_ shouldNotSee $ \party -> do
                None <- queryContractId party cid
                pure ()
    test ("Only " <> show shouldSee <> " should see " <> label <> " and " <> show shouldNotSee <> " should not") go

-- | Given a contract, a choice, and a party who should be able to exercise that choice on that contract,
-- confirms that no other user can exercise that choice and that user can.
testExercise
    : (HasExercise t c b, HasFromAnyTemplate t, HasToAnyTemplate t, HasTemplateTypeRep t, HasToAnyChoice t c b, HasFromAnyChoice t c b, Show c)
    => LedgerParties
    -> Party
    -> ContractId t
    -> c
    -> Script b
testExercise ps shouldExercise cid contract_choice = do
    let shouldNotExercise = filter (/= shouldExercise) (partiesList ps)
        label = T.takeWhile (/=" ") $ show contract_choice
        go = do
            forA_ shouldNotExercise $ \party -> do
                submitMustFail party $ exerciseCmd cid contract_choice
            submit shouldExercise $ exerciseCmd cid contract_choice
    test ("Only " <> show shouldExercise <> " should be able to exercise " <> label <> " and " <> show shouldNotExercise <> " should not") go
