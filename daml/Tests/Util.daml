module Tests.Util
  ( getAccountHoldings
  , getHoldingOfAmount
  )
  where

import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, AccountKey)
import Daml.Script
import qualified Daml.Finance.Holding.Fungible as Holding
import qualified Daml.Finance.Interface.Holding.Fungible as IHolding
import DA.List.Total (head)
import Daml.Finance.Interface.Holding.Fungible (SplitResult(SplitResult))

getAccountHoldings
  :  AccountKey
  -> InstrumentKey
  -> Script [(ContractId Holding.Fungible, Holding.Fungible)]
getAccountHoldings k currency =
  queryFilter
    k.owner
    (\holding -> holding.account == k && holding.instrument == currency)

-- | Given an AccountKey and a quantity, produce a holding of the specified quantity
getHoldingOfAmount
  :  AccountKey
  -> InstrumentKey
  -- ^ Target currency
  -> Optional Decimal
  -- ^ Some: return a Holding of this exact amount
  --   None: merge all account holdings and return this Holding
  -> Script (Optional (ContractId Holding.Fungible))
  -- ^ None: insufficient funds, Some: a holding of the specified quantity
getHoldingOfAmount k currency mQty =
  case mQty of
    None ->
      getAccountHoldings k currency >>= \case
        [] -> pure None
        [one] -> pure $ Some (fst one)
        first :: rest -> Some <$> merge (fst first) (fst <$> rest)
    Some qty ->
      getAccountHoldings k currency >>= letsGo qty
  where
    letsGo qty holdings
      | sum (map ((.amount) . snd) holdings) < qty =
          pure None -- Insufficient funds
      | Some exactMatch <- getExactMatch qty holdings =
          pure $ Some (fst exactMatch) -- We have an exact match (lucky!)
      | otherwise = do
        case holdings of
          [] -> pure None -- already handlded by the sum check above
          [justOne] -> Some <$> doSplit qty (fst justOne)
          (holding1 :: otherHoldings) -> doMerge qty holding1 otherHoldings

    doMerge qty first rest = do
      mergedHolding <- merge (fst first) (fst <$> rest)
      Some <$> doSplit qty mergedHolding

    doSplit qty holdingCid = do
      [res] <- split holdingCid [qty]
      pure res

    getExactMatch qty holdings =
      head $ filter ((== qty) . (.amount) . snd) holdings

    merge
      :  ContractId Holding.Fungible
      -> [ContractId Holding.Fungible]
      -> Script (ContractId Holding.Fungible)
    merge holdingCid holdingCids = do
      let iFungible = toInterfaceContractId @IHolding.Fungible holdingCid
      res <- submit k.owner $ exerciseCmd iFungible IHolding.Merge with
        fungibleCids = toInterfaceContractId @IHolding.Fungible <$> holdingCids
      pure $ fromInterfaceContractId res

    split
      :  ContractId Holding.Fungible
      -> [Numeric 10]
      -> Script [ContractId Holding.Fungible]
    split holdingCid amounts = do
      SplitResult{splitCids} <- submit k.owner do
        exerciseCmd (toInterfaceContractId @IHolding.Fungible holdingCid) IHolding.Split with
          amounts = amounts
      pure (fromInterfaceContractId @Holding.Fungible <$> splitCids)
