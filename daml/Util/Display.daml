-- | Converting datatypes into human readable output
module Util.Display where

import Daml.Script
import qualified DA.Text as T
import qualified DA.Set as Set

import qualified Daml.Finance.Settlement.Batch as Batch
import qualified Daml.Finance.Interface.Settlement.Types as Settlement
import Daml.Finance.Interface.Types.Common.Types

-- | Converts a datatype into a human-readable string. Emphasis should be placed
-- on readability, so instances will often produce multiline strings.
class Display a where
  display : a -> Text

-- | Logs a displayable datatype during execution of a daml script.
log : Display a => a -> Script ()
log = debugRaw . ("\n"<>) . display -- We use debugRaw to ensure newlines cause line breaks

-- | Log a displayable datatype with a fallback
logSome : Display a => Text -> Optional a -> Script ()
logSome fallback = log . optional fallback display

-- | Fetch a contract by ID from the ledger and log it, or log a fallback message if it isn't found.
logSomeLedger
   : (Display a, HasTemplateTypeRep a, HasToAnyTemplate a, HasFromAnyTemplate a, HasAgreement a)
   => Party -> Text -> ContractId a -> Script ()
logSomeLedger party fallback cid = do
  logSome fallback =<< queryContractId party cid

-- | Fetch a contract by ID from the ledger and log it. Fails if the contract isn't found.
logLedger
   : (Display a, HasTemplateTypeRep a, HasToAnyTemplate a, HasFromAnyTemplate a, HasAgreement a)
   => Party -> ContractId a -> Script ()
logLedger party cid = do
  a <- queryContractId party cid
  case a of
    None -> fail $ "Could not find contract id " <> show cid <> " with party " <> show party
    Some a' -> log a'

showLedger
   : (HasTemplateTypeRep a, HasToAnyTemplate a, HasFromAnyTemplate a, HasAgreement a, Show a)
   => Party -> Text -> ContractId a -> Script ()
showLedger party fallback cid = do
  logSome fallback . fmap show =<< queryContractId party cid

instance Display Batch.Batch where
 display b = T.intercalate "\n" $ 
    [ "Batch: " <> show b.id <> " " <> b.description
    , "> Requestors: " <> show (Set.toList  b.requestors)
    , "> Settlers: " <> show (Set.toList b.settlers)
    , "> Settlement time: " <> optional "N/A" show b.settlementTime 
    , "> Routed steps: " <> show (length b.routedStepsWithInstructionId)
    ] <> map (display . fst) b.routedStepsWithInstructionId

instance Display Text where
  display = identity

instance Display Settlement.RoutedStep where
  display r = T.intercalate " "
    [ ">>"
    , show r.sender
    , "->"
    , show r.receiver
    , "-"
    , show r.quantity.amount
    , display r.quantity.unit
    , "(Custod. " <> show r.custodian <> ")"
    ]

instance Display Decimal where
  display = show

instance Display InstrumentKey where
  display a = show a.id <> " v" <> (T.take 4 a.version)

instance Display AccountKey where
  display a =
    show a.owner <> " account with " <> show a.custodian <> " custodian"

displayLinesWith : Display a => (Text -> Text) -> a -> [Text]
displayLinesWith f a =
  (map f (T.lines $ display a))

displayIndent : Display a => a -> [Text]
displayIndent = displayLinesWith ("> "<>)

instance Display (ContractId a) where
  display = T.take 4 . show
