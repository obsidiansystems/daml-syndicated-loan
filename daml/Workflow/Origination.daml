module Workflow.Origination where

import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..))

-- ### TODO
--   * Include "start date" of the loan (used to calculate coupon payment dates)
--      * Equal to the day at which the loan principal amount is transferred to the borrower.
--   * Figure out what to use as the output of this step to be used as input to the servicing process.
--   * Use daml-finance types for specifying e.g. coupon payment schedule (cf. https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-FixedRate-Instrument.html)
--      * Maybe just include the payment schedule in the final output of this whole process (to be used as input for the servicing process)

-- | Rate per annum.
-- E.g. "3.5% per annum" is represented as 0.035
newtype RatePerAnnum = RatePerAnnum Decimal
  deriving (Eq, Show)

-- | An application for a loan by a borrower
-- NOTE: Borrowers may create and freely submit loan applications to agents. We do
-- not limit the ability to apply in any way.
template LoanApplication
  with
    borrower : Party
    agent : Party
    amount : Numeric 2
    duration : Int  -- ^ Number of years
    maxInterestRate : RatePerAnnum
    prospectus : Text
    -- ^ an explanation, by the borrower, of what the loan will be used for
    -- TODO: The lenders (not just the underwriter) want to see the prospectus too
  where
    signatory borrower
    observer agent

template UnderwritingRequest
  with
    underwriter : Party
    uuid : Text -- Generated client-side by the agent so that each 'LoanApplication' has unique ID. We could also use a 'ContractId LoanApplication' to be the unique ID for a 'UnderwritingRequest', but the borrower has the ability to archive the LoanApplication, and we don't want to give the borrower the ability to delete a piece of data that is referred to by contracts involving other parties.
    loan : LoanApplication -- See comment above
  where
    signatory loan.agent
    observer underwriter
    key (loan.agent, uuid) : (Party, Text)
    maintainer key._1

template UnderwritingResult
  with
    underwriter : Party
    agent : Party
    uuid : Text
    result : Bool
  where
    signatory underwriter
    observer agent
    key (agent, uuid) : (Party, Text)
    maintainer key._1

-- | A request created by the agent inviting a single participant to make an offer on a 'LoanApplication'
template LoanRequest
  with
    agent : Party
    uuid : Text
    totalApplicationAmount : Numeric 2
    -- ^ Invariant: must be equal to the LoanApplication.amount that is pointed to by this contract's key
    participant : Party
    -- ^ The agent creates one 'LoanRequest' for each participant from whom it wants an offer
  where
    signatory agent
    observer participant
    key (agent, uuid) : (Party, Text)
    maintainer key._1

-- | An offer by a participant to loan part (or all of) of the amount specified by the LoanApplication
template LoanOffer
  with
    agent : Party
    uuid : Text
    participant : Party
    amount : Numeric 2
    rate : RatePerAnnum
    -- TODO: for now we just reject offers that are greater than LoanApplication.maxInterestRate, but eventually we'd like to accept all offers that makes it possible for the agent to offer a final loan of less than or equal to LoanApplication.maxInterestRate.
  where
    signatory participant
    observer agent
    key (agent, uuid) : (Party, Text)
    maintainer key._1

template SyndicatedLoanOffer
  with
    agent : Party
    uuid : Text
    borrower : Party
    amount : Numeric 2
    rate : Decimal
    -- other terms: term, fees, covenants, etc.
    --NOTE: Maybe a covenant, once agreed by the borrower, could actually grant access to some on-chain data in the future, which is necessary to enforce it. and this could also trigger on-chain modifications of the loan.
  where
    signatory agent
    observer borrower
    key (agent, uuid) : (Party, Text)
    maintainer key._1

data LoanTerms = LoanTerms with
    amount : Numeric 2 -- Principal. TODO: for now always equal to LoanApplication.amount
    rate : RatePerAnnum
    -- ^ The interest amount paid by the borrower yearly is (amount * rate).
    -- ^ TODO: for now this is always equal to LoanApplication.maxInterestRate, but we want this to become an amount-weighted average of offered participant rates
    duration : Int
    -- ^ Number of times the borrower pays interest, as well as the number of years after which the principal amount must be returned to the lenders.
      deriving (Eq, Show)

-- The final loan agreement should include all parties. The privacy barrier is dropped in this final step. In the bookbuilding process, no identities are revealed.
template LoanAgreement
  with
    agent : Party
    participants : [Party]
    borrower : Party
    uuid : Text -- Points to UnderwritingRequest.uuid
    prospectus : Text
    loanTerms : LoanTerms
  where
    signatory agent, borrower, participants

-- Need to provide some proof to P that A gave the loan amount to the same B that was underwritten. Can we do this without revealing B's identity?

loanAgreementToPeriodicSchedule : LoanAgreement -> PeriodicSchedule
loanAgreementToPeriodicSchedule = error "TODO"
