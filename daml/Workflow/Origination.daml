module Workflow.Origination
  ( AcceptedLoanOffer(..)
  , AcceptedLoanOffer_SignAgreement(..)
  , AcceptedLoanApplication(..)
  , AcceptedLoanApplication_StartProcess(..)
  , AcceptedMandateLetter(..)
  , AcceptedMandateLetter_Burn(..)
  , AcceptedMandateLetter_CreateOffer(..)
  , AcceptedMandateLetter_CreateToken(..)
  , AcceptedMandateLetterToken_Burn(..)
  , CreateUnderwritingResult(..)
  , FundingInterest(..)
  , displayFundingInterestTerms
  , FundingInterest_Decline(..)
  , FundingInterest_SignAgreement(..)
  , FundingRequest(..)
  , FundingRequest_Respond(..)
  , FundingRequest_Reject(..)
  , LoanAgreement(..)
  , LoanApplicationSubmission(..)
  , LoanApplicationData(..)
  , LoanApplicationProcess(..)
  , LoanApplicationProcess_CreatePendingLoanAgreement(..)
  , LoanApplicationProcess_CreateUnderwritingRequest(..)
  , LoanApplicationProcess_OfferMandateLetter(..)
  , LoanApplicationSubmission_Accept(..)
  , MakeFundingRequest(..)
  , MandateLetterOffer_Accept(..)
  , OriginatedLoanAgreement(..)
  , OriginatedLoanAgreement_Lifecycle(..)
  , OriginatedLoanAgreement_LifecycleData(..)
  , PendingLoanAgreement(..)
  , PendingLoanAgreement_Finalize(..)
  , RatePerAnnum(..)
  , SyndicatedLoanOffer(..)
  , SyndicatedLoanOffer_Accept(..)
  , UnderwritingRequest(..)
  , UnderwritingResult(..)
  , UnderwritingResult_Disclose(..)
  , createPaymentPeriodicSchedule
  )
  where

import Prelude hiding (agreement, key, forA)

import DA.Action (foldlA)
import DA.Date (toGregorian)
import DA.Map (Map)
import DA.Map qualified as Map
import DA.Set qualified as Set
import DA.Text qualified as T
import DA.Traversable

import Daml.Finance.Claims.Lifecycle.Rule qualified as LifecycleRule
import Daml.Finance.Interface.Instrument.Bond.FixedRate.Types (FixedRate(..))
import Daml.Finance.Interface.Instrument.Bond.FixedRate.Factory qualified as FixedRate
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument
import Daml.Finance.Interface.Lifecycle.Effect (Effect(..))
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Claim
import Daml.Finance.Interface.Lifecycle.Rule.Lifecycle qualified as Lifecycle
import Daml.Finance.Interface.Settlement.Factory qualified as Settlement
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey(..), Id(Id))
import Daml.Finance.Interface.Types.Date.Calendar (BusinessDayAdjustment(..))
import Daml.Finance.Interface.Types.Date.Calendar qualified as Cal
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (PeriodEnum, RollConventionEnum(..), Period(..))
import Daml.Finance.Interface.Types.Date.Schedule (Frequency(..), PeriodicSchedule(..))
import Daml.Finance.Interface.Types.Date.Schedule qualified as Sched
import Daml.Finance.Lifecycle.Rule.Claim qualified as Claim

import Util.Display
import Workflow.Servicing
import Workflow.Util

-- ### TODO
--   * Include "start date" of the loan (used to calculate coupon payment dates)
--      * Equal to the day at which the loan principal amount is transferred to the borrower.
--   * Figure out what to use as the output of this step to be used as input to the servicing process.
--   * Use daml-finance types for specifying e.g. coupon payment schedule (cf. https://docs.daml.com/daml-finance/reference/code-documentation/daml-finance-rst/Daml-Finance-Instrument-Bond-FixedRate-Instrument.html)
--      * Maybe just include the payment schedule in the final output of this whole process (to be used as input for the servicing process)

-- | Rate per annum.
-- E.g. "3.5% per annum" is represented as 0.035
newtype RatePerAnnum = RatePerAnnum { unRatePerAnnum : Decimal }
  deriving (Eq, Show, Ord)

instance Display RatePerAnnum where
  display a = show (a.unRatePerAnnum * 100.0) <> "% per annum"

data LoanApplicationData = LoanApplicationData
  with
    instrument : InstrumentKey
    -- ^ The instrument in which the loan is denominated
    amount : Decimal
    -- ^ The amount requested
    durationYears : Int
    -- ^ The loan term requested
    maxInterestRate : RatePerAnnum
    -- ^ The maximum interest rate desired
    schedule : PeriodicSchedule
    -- ^ The desired repayment coupon schedule
    prospectus : Text
    -- ^ An explanation, by the borrower, of what the loan will be used for
  deriving (Eq, Show)

-- | An application for a loan by a borrower
-- NOTE: Borrowers may create and freely submit loan applications to agents. We do
-- not limit the ability to apply in any way.
template LoanApplicationSubmission
  with
    borrower : Party
    agent : Party
    applicationData : LoanApplicationData
  where
    signatory borrower
    observer agent

    choice LoanApplicationSubmission_Reject : ()
      controller agent
      do
        pure ()

    choice LoanApplicationSubmission_Accept : ContractId AcceptedLoanApplication
      with
        uuid : Text
      controller agent
      do
        create AcceptedLoanApplication with
          agent
          borrower
          applicationData
          uuid

instance Display LoanApplicationSubmission where
  display a = T.intercalate "\n" $
    ("Loan Application from " <> show a.borrower <> " to " <> show a.agent) ::
      displayLinesWith ("> "<>) a.applicationData

instance Display LoanApplicationData where
  display a = T.intercalate "\n"
    [ "Requesting: " <> display a.amount <> " of " <> display a.instrument <> " at " <> display a.maxInterestRate
    , "For: " <> a.prospectus
    ]

-- | This template represents a loan application that has been accepted by an agent.
-- This will be used as a reference throughout the application workflow as evidence that
-- the agent has committed to processing the application that the borrower has authorized.
template AcceptedLoanApplication
  with
    borrower : Party
    agent : Party
    applicationData : LoanApplicationData
    uuid : Text
  where
    signatory agent, borrower
    nonconsuming choice AcceptedLoanApplication_StartProcess : ContractId LoanApplicationProcess
      controller agent
      do
        create LoanApplicationProcess with
          agent
          borrower
          application = this
          applicationCid = self

instance Display AcceptedLoanApplication where
  display a = T.intercalate "\n" $
    (show a.agent <> " accepted loan application from " <> show a.borrower) ::
      displayLinesWith ("> "<>) a.applicationData

-- | This template represents the loan application process hidden from the borrower. To maintain anonymity between
-- the borrower and other parties, such as the underwriters and lenders, they are not a signatory of such contracts.
-- If they were, they would have divulged to them the existence of, for example, an underwriting request made about
-- their application.
--
-- Unfortunately this means that the underwriters and lenders at this stage cannot verify that the agent did not fabricate
-- the application. Only when every party has provided their input into the process, and the final loan agreement is
-- constructed, will the validity of the loan application be established.
template LoanApplicationProcess
  with
    agent : Party
    borrower : Party
    application : AcceptedLoanApplication
    applicationCid : ContractId AcceptedLoanApplication
  where
    signatory agent
    nonconsuming choice LoanApplicationProcess_CreateUnderwritingRequest : ContractId UnderwritingRequest
      with
        underwriter : Party
      controller agent

      do
        fetchedApplication <- fetch applicationCid
        assertMsg "Application data does not match accepted application" $ application == fetchedApplication
        create UnderwritingRequest with
          underwriter
          application
          applicationCid

    nonconsuming choice LoanApplicationProcess_OfferMandateLetter : ContractId MandateLetterOffer
      with
        reportCid : ContractId UnderwritingResult
      controller application.agent
      do
        report <- fetch reportCid
        assertMsg "Report application does not match accepted application" $ report.application == this.application
        assertMsg "Report application cid does not match accepted application cid" $ report.applicationCid == this.applicationCid
        create MandateLetterOffer with
          agent = application.agent
          borrower = application.borrower
          applicationCid
          reportCid
          mandateLetter = MandateLetter with
            instrument = report.report.instrument
            amount = report.report.amount
            durationYears = report.report.durationYears
            prospectus = report.report.prospectus
    -- NOTE: Consumingâ€” we assume that at this point the state of the application is "take it or leave it"
    choice LoanApplicationProcess_CreatePendingLoanAgreement : ContractId PendingLoanAgreement
      with
        borrower_commitment : ContractId AcceptedLoanOffer
        lender_commitments : Map (ContractId FundingInterest) Decimal
      controller agent
      do
        acceptedLoanOffer <- fetch borrower_commitment
        let acceptedTerms = acceptedLoanOffer.terms
        -- Each lender will verify the agreement when they sign it below
        lenderCommitments <- forA (Map.toList lender_commitments) $ \(cid, amount) -> do
          commitment <- fetch cid
          pure (commitment.participant, amount)
        pendingAgreementCid <- create PendingLoanAgreement with
          loanAgreement = LoanAgreement with
            agent
            borrower
            loanTerms = acceptedTerms
            participantsWithAmounts = Map.fromList lenderCommitments
            uuid = acceptedLoanOffer.uuid
            prospectus = acceptedLoanOffer.mandateLetter.mandateLetter.prospectus
          applicationCid
          signed = []
        signedByBorrower <- exercise borrower_commitment $ AcceptedLoanOffer_SignAgreement with
          pendingAgreementCid
        signedPendingAgreement <- foldlA
          (\agreementCid fundingInterestCid -> exercise fundingInterestCid FundingInterest_SignAgreement with agreementCid)
          signedByBorrower
          (Map.keys lender_commitments)
        -- TODO: Clean up paper trail
        pure signedPendingAgreement



instance Display LoanApplicationProcess where
  display a = T.intercalate "\n" $
    (show a.agent <> " is processing application " <> display a.applicationCid <> " from " <> show a.borrower) ::
      displayLinesWith ("> " <>) a.application.applicationData

template UnderwritingRequest
  with
    underwriter : Party
    applicationCid : ContractId AcceptedLoanApplication
    application : AcceptedLoanApplication

  where
    signatory application.agent
    observer underwriter
    key (application.agent, application.uuid) : (Party, Text)
    maintainer key._1

    choice UnderwritingRequest_Cancel : ()
      controller underwriter
      do
        pure ()

    choice CreateUnderwritingResult : ContractId UnderwritingResult
      with
        result : Bool
      controller underwriter
      do
        create UnderwritingResult with
          underwriter
          applicationCid
          application
          -- TODO: Do not just take from the application
          report = UnderwritingReport with
            instrument = this.application.applicationData.instrument
            amount = this.application.applicationData.amount
            durationYears = this.application.applicationData.durationYears
            maxInterestRate = this.application.applicationData.maxInterestRate
            prospectus = this.application.applicationData.prospectus
          result

instance Display UnderwritingRequest where
  display a = T.intercalate "\n" $
    (show a.underwriter <> " receives underwriting request " <> display a.applicationCid) ::
      displayLinesWith ("> " <>) a.application.applicationData

-- | This template represents the result of an underwriting report signed by an underwriter
template UnderwritingResult
  with
    underwriter : Party
    applicationCid : ContractId AcceptedLoanApplication
    application : AcceptedLoanApplication
    report : UnderwritingReport
    result : Bool
  where
    signatory application.agent, underwriter
    key (underwriter, application.agent, application.uuid) : (Party, Party, Text)
    maintainer key._1

    nonconsuming choice UnderwritingResult_Disclose : ContractId UnderwritingDisclosure
      with
        disclose_to : Party
        mandateLetterTokenCid : ContractId AcceptedMandateLetterToken
      controller application.agent
      do
        letter <- fetch mandateLetterTokenCid
        assertMsg "Provided mandate letter was not for this underwriting report" $ letter.reportCid == self
        create UnderwritingDisclosure with
          underwriter
          agent = application.agent
          uuid = application.uuid
          reportCid = self
          report = this.report
          participant = disclose_to

instance Display UnderwritingResult where
  display a = T.intercalate "\n" $
    let passfail = if a.result then "PASSING" else "FAILING"
    in (show a.underwriter <> " submits " <> passfail <> " underwriting result for " <> display a.applicationCid) ::
        displayLinesWith ("> "<>) a.report

-- | This represents the information about the loan application that the underwriter has determined
data UnderwritingReport = UnderwritingReport with
    instrument : InstrumentKey
    amount : Decimal -- Principal
    maxInterestRate : RatePerAnnum -- the maximum interest rate that the applicant is underwritten for
    durationYears : Int
    -- ^ Number of times the borrower pays interest, as well as the number of years after which the principal amount must be returned to the lenders.
    prospectus : Text
  deriving (Eq, Ord, Show)

instance Display UnderwritingReport where
  display a = "Request: "
    <> display a.amount
    <> " of "
    <> display a.instrument
    <> " at "
    <> display a.maxInterestRate
    <> " for "
    <> show a.durationYears <> " years"

-- | The information from the Underwriter's report on the application that will be shared with the applicant.
data MandateLetter = MandateLetter
  with
    instrument : InstrumentKey
    amount : Decimal -- Principal. TODO: for now always equal to LoanApplication.amount
    durationYears : Int
    -- ^ Number of times the borrower pays interest, as well as the number of years after which the principal amount must be returned to the lenders.
    prospectus : Text
  deriving (Eq, Ord, Show)

instance Display MandateLetter where
  display a = T.intercalate "\n"
    [ "Terms: " <> display a.amount <> " of " <> display a.instrument <> " for " <> show a.durationYears <> "y"
    , "Prospectus: " <> a.prospectus
    ]

-- | This template represents an offer from the agent to a borrower to continue the loan application process under
-- the provided terms. The underwriter has vouched for the legitimacy of this mandate letter, but we do not
-- reveal their identity here. We maintain a reference to the report so that we can audit validity separately.
template MandateLetterOffer
  with
    agent : Party
    borrower : Party
    applicationCid : ContractId AcceptedLoanApplication
    reportCid : ContractId UnderwritingResult
    mandateLetter : MandateLetter
  where
    signatory agent
    observer borrower
    choice MandateLetterOffer_Accept : ContractId AcceptedMandateLetter
      controller borrower
      do
        _ <- fetch applicationCid
        create AcceptedMandateLetter with ..
    choice MandateLetterOffer_Reject : ()
      controller borrower
      do
        pure ()

instance Display MandateLetterOffer where
  display a = T.intercalate "\n" $
    (show a.agent <> " sends mandate letter to " <> show a.borrower <> " for application " <> display a.applicationCid) ::
      displayIndent a.mandateLetter

-- | This template represents a mandate letter that has been offered by the agent to the borrower,
-- and accepted by the borrower. It represents on-chain the consent of the borrower for the agent to reach out to lenders
-- for consideration of the terms described.
template AcceptedMandateLetter
  with
    agent : Party
    borrower : Party
    applicationCid : ContractId AcceptedLoanApplication
    reportCid : ContractId UnderwritingResult
    mandateLetter : MandateLetter
  where
    signatory agent, borrower
    choice AcceptedMandateLetter_Burn : ()
      controller agent
      do
        pure ()
    nonconsuming choice AcceptedMandateLetter_CreateOffer : ContractId SyndicatedLoanOffer
      with
        rate : RatePerAnnum
      controller agent
      do
        application <- fetch applicationCid
        create SyndicatedLoanOffer with
          uuid = application.uuid
          mandateLetterCid = self
          mandateLetter = this
          terms = LoanTerms with
            instrument = mandateLetter.instrument
            amount = mandateLetter.amount
            rate
            durationYears = mandateLetter.durationYears
            schedule = application.applicationData.schedule
    nonconsuming choice AcceptedMandateLetter_CreateToken : ContractId AcceptedMandateLetterToken
      controller agent
      do
        create AcceptedMandateLetterToken with
          borrower
          agent
          reportCid

template AcceptedMandateLetterToken
  with
    borrower : Party
    agent : Party
    reportCid : ContractId UnderwritingResult
  where
    signatory borrower, agent
    choice AcceptedMandateLetterToken_Burn : ()
      controller agent
      do
        pure ()

instance Display AcceptedMandateLetter where
  display a = T.intercalate "\n" $
    (show a.borrower <> " accepts mandate letter from " <> show a.agent <> " for application " <> display a.applicationCid) ::
      displayIndent a.mandateLetter


-- | This template represents a signed underwriting report that is being shared with a prospective lender.
-- The agent cannot request funding from a lender without providing this information. It is a separate template
-- to maintain the privacy of the borrower until it is appropriate to reveal their identity to the relevant parties.
--
-- NOTE: The underwriter is not a signatory so as not to reveal the existence of funding requests to the underwriter
template UnderwritingDisclosure
  with
    agent : Party
    uuid : Text
    reportCid : ContractId UnderwritingResult
    underwriter : Party
    report : UnderwritingReport
    participant : Party
  where
    signatory agent
    observer participant

    nonconsuming choice MakeFundingRequest : ContractId FundingRequest
      with
        requestee : Party
      controller agent
      do
        fetchedReport <- fetch reportCid
        assertMsg "Disclosed report does not match signed report" $ this.report == fetchedReport.report
        assertMsg "Underwriter disclosed does not match authorizing underwriter" $ this.underwriter == fetchedReport.underwriter
        create FundingRequest with
          agent = agent
          uuid = uuid
          totalApplicationAmount = report.amount
          participant = requestee
          reportCid = self
          report

instance Display UnderwritingDisclosure where
  display a = "Underwriting report disclosed by " <> show a.agent <> " to " <> show a.participant

-- | A request created by the agent inviting a single participant to make an offer on a 'LoanApplication'
template FundingRequest
  with
    agent : Party
    uuid : Text
    reportCid : ContractId UnderwritingDisclosure
    report : UnderwritingReport
    totalApplicationAmount : Decimal
    -- ^ Invariant: must be equal to the LoanApplication.amount that is pointed to by this contract's key
    participant : Party
    -- ^ The agent creates one 'FundingRequest' for each participant from whom it wants an offer
  where
    signatory agent
    observer participant
    key (agent, participant, uuid) : (Party, Party, Text)
    maintainer key._1

    choice FundingRequest_Reject : ()
      controller participant
      do
        pure ()

    choice FundingRequest_Respond : ContractId FundingInterest
      with
        amount : Decimal
        rate : RatePerAnnum
      controller participant
      do
        disclosed <- fetch reportCid
        assertMsg "Report does not match disclosed report" $
          disclosed.report == this.report
        assertMsg "Must respond with an interest rate less than the maximum underwritten" $
          rate <= disclosed.report.maxInterestRate
        create FundingInterest with
          agent
          uuid
          participant
          reportCid
          report
          amount
          rate

instance Display FundingRequest where
  display a = "Funding request sent by " <> show a.agent <> " to " <> show a.participant

-- | An offer by a participant to loan part (or all of) of the amount specified by the LoanApplication
template FundingInterest
  with
    agent : Party
    uuid : Text
    participant : Party
    reportCid : ContractId UnderwritingDisclosure
    report : UnderwritingReport
    amount : Decimal
    rate : RatePerAnnum
    -- TODO: for now we just reject offers that are greater than LoanApplication.maxInterestRate, but eventually we'd like to accept all offers that makes it possible for the agent to offer a final loan of less than or equal to LoanApplication.maxInterestRate.
    -- TODO: expiry date after which the lender will be able to withdraw the interest
  where
    signatory participant, agent
    key (participant, agent, uuid) : (Party, Party, Text)
    maintainer key._1
    choice FundingInterest_Decline : ()
      controller agent
      do
        pure ()
    choice FundingInterest_SignAgreement : ContractId PendingLoanAgreement
      with
        agreementCid : ContractId PendingLoanAgreement
      controller agent
      do
        pendingAgreement <- fetch agreementCid
        let loanAgreement = pendingAgreement.loanAgreement
        fetchedDisclosure <- fetch reportCid
        assertMsg "Report does not match referenced report" $ fetchedDisclosure.report == this.report
        fetchedReport <- fetch fetchedDisclosure.reportCid
        assertMsg "Disclosed report does not match original report" $ fetchedReport.report == fetchedDisclosure.report
        fetchedApplication <- fetch pendingAgreement.applicationCid
        assertMsg "Report application does not match referenced application" $ fetchedApplication == fetchedReport.application
        case Map.lookup this.participant loanAgreement.participantsWithAmounts of
          None -> fail "Loan terms do not include this lender"
          Some myAmount -> do
            assertMsg "Interest offered does not exceed agreed upon rate" $
              rate >= this.rate
            assertMsg "Amount required exceeds agreed upon amount" $
              this.amount >= myAmount
            exercise agreementCid PendingLoanAgreement_Sign with
              signer = this.participant

instance Display FundingInterest where
  display a = T.intercalate "\n"
    [ show a.participant <> " sends offer to " <> show a.agent
    , displayFundingInterestTerms a
    ]

displayFundingInterestTerms : FundingInterest -> Text
displayFundingInterestTerms a =
    "Terms: " <> display a.amount <> " of " <> display a.report.instrument <> " at " <> display a.rate

template SyndicatedLoanOffer
  with
    uuid : Text
    mandateLetterCid : ContractId AcceptedMandateLetter
    mandateLetter : AcceptedMandateLetter
    terms : LoanTerms
    --NOTE: Maybe a covenant, once agreed by the borrower, could actually grant access to some on-chain data in the future, which is necessary to enforce it. and this could also trigger on-chain modifications of the loan.
  where
    signatory mandateLetter.agent
    observer mandateLetter.borrower
    key (mandateLetter.agent, uuid) : (Party, Text)
    maintainer key._1
    choice SyndicatedLoanOffer_Accept : ContractId AcceptedLoanOffer
      controller mandateLetter.borrower
      do
        fetchedMandate <- fetch mandateLetterCid
        assertMsg "Mandate letter must match referenced mandate letter" $ fetchedMandate == this.mandateLetter
        create AcceptedLoanOffer with
          uuid
          mandateLetterCid
          mandateLetter
          terms

instance Display SyndicatedLoanOffer where
  display a = T.intercalate "\n" $
    (show a.mandateLetter.agent <> " sends loan offer to " <> show a.mandateLetter.borrower) ::
      displayIndent a.mandateLetter.mandateLetter

data LoanTerms = LoanTerms with
    instrument : InstrumentKey
    amount : Decimal -- Principal. TODO: for now always equal to LoanApplication.amount
    rate : RatePerAnnum
    -- ^ The interest amount paid by the borrower yearly is (amount * rate).
    durationYears : Int
    -- ^ The number of years after which the principal amount must be returned to the lenders.
    schedule : PeriodicSchedule
    -- ^ Repayment coupon schedule
      deriving (Eq, Show)

instance Display LoanTerms where
  display a =
    "Terms: " <> display a.amount
    <> " of " <> display a.instrument
    <> " at " <> display a.rate
    <> " for " <> show a.durationYears <> "y"
    <> "\n"
    <> "Repayment schedule: " <> display a.schedule

template AcceptedLoanOffer
  with
    uuid : Text
    mandateLetterCid : ContractId AcceptedMandateLetter
    mandateLetter : AcceptedMandateLetter
    terms : LoanTerms
  where
    signatory mandateLetter.borrower, mandateLetter.agent
    choice AcceptedLoanOffer_SignAgreement : ContractId PendingLoanAgreement
      with
        pendingAgreementCid : ContractId PendingLoanAgreement
      controller mandateLetter.agent
      do
        pendingAgreement <- fetch pendingAgreementCid
        let pendingTerms = pendingAgreement.loanAgreement.loanTerms
        assertMsg "Accepted terms do not agree with final loan agreement" $
          this.terms == pendingTerms
        exercise pendingAgreementCid PendingLoanAgreement_Sign with
          signer = this.mandateLetter.borrower

instance Display AcceptedLoanOffer where
  display a = T.intercalate "\n" $
    (show a.mandateLetter.borrower <> " accepted loan offer from " <> show a.mandateLetter.agent) ::
      displayIndent a.terms

-- The final loan agreement should include all parties. The privacy barrier is dropped in this final step. In the bookbuilding process, no identities are revealed.
template LoanAgreement
  with
    agent : Party
    participantsWithAmounts : Map Party (Decimal)
    borrower : Party
    uuid : Text -- Points to UnderwritingRequest.uuid
    prospectus : Text
    loanTerms : LoanTerms
  where
    signatory agent, borrower, Map.keys participantsWithAmounts
    ensure sum (Map.values participantsWithAmounts) == loanTerms.amount

template PendingLoanAgreement
  with
    loanAgreement : LoanAgreement
    applicationCid : ContractId AcceptedLoanApplication
    signed : [Party]
  where
    signatory loanAgreement.agent, signed
    observer (Map.keys loanAgreement.participantsWithAmounts), loanAgreement.borrower
    choice PendingLoanAgreement_Sign : ContractId PendingLoanAgreement
      with
        signer : Party
      controller signer
      do
        create this with
          signed = signer :: (this.signed)
    choice PendingLoanAgreement_Finalize : ContractId OriginatedLoanAgreement
      with
        now : Time
        routeProviderCid : ContractId RouteProvider.I
        settlementFactoryCid : ContractId Settlement.F
        fixedRateBondFactoryCid : ContractId FixedRate.F
      controller loanAgreement.agent
      do
        archive applicationCid
        let bondInstrument = loanAgreementToBondCreate now this.loanAgreement.loanTerms.instrument this.loanAgreement
        bondCid <- exercise fixedRateBondFactoryCid bondInstrument
        let bondKey = InstrumentKey with
              issuer = bondInstrument.fixedRate.instrument.issuer
              depository = bondInstrument.fixedRate.instrument.depository
              id = Id loanAgreement.uuid
              version = "0"
            agent = loanAgreement.agent
            borrower = loanAgreement.borrower
            lenders = Map.keys loanAgreement.participantsWithAmounts
            lenderSet = Set.fromList lenders
        lifecycleRule <- fmap (toInterfaceContractId @Lifecycle.Lifecycle) $
          create $ LifecycleRule.Rule with
            providers = Set.fromList [borrower]
            observers = Map.fromList [("agent", Set.singleton agent)]
            lifecycler = agent
            id = Id "LifecycleRule"
            description = "Rule to lifecycle the bond instrument"
        claimRule <- fmap (toInterfaceContractId @Claim.I) $
          create $ Claim.Rule with
            providers = Set.fromList [borrower]
            claimers = lenderSet
            settlers = Set.union (Set.fromList [borrower, agent]) lenderSet
            routeProviderCid
            settlementFactoryCid
            netInstructions = False
        create OriginatedLoanAgreement with
          loanAgreement = this.loanAgreement
          bondInstrument
          bondKey
          bondCid
          routeProviderCid
          settlementFactoryCid
          lifecycleRule
          claimRule

data OriginatedLoanAgreement_LifecycleData = OriginatedLoanAgreement_LifecycleData with
  newBondKey : Optional InstrumentKey
  effects : [ContractId Effect]

template OriginatedLoanAgreement
  with
    loanAgreement : LoanAgreement
    bondInstrument : BondInstrument
    bondKey : InstrumentKey
    bondCid : ContractId BaseInstrument.I
    routeProviderCid : ContractId RouteProvider.I
    settlementFactoryCid : ContractId Settlement.F
    lifecycleRule : ContractId Lifecycle.Lifecycle
    claimRule : ContractId Claim.Claim

  where
    signatory loanAgreement.agent, loanAgreement.borrower, Map.keys loanAgreement.participantsWithAmounts
    ensure sum (Map.values loanAgreement.participantsWithAmounts) == loanAgreement.loanTerms.amount

    nonconsuming choice OriginatedLoanAgreement_Lifecycle : (Optional (ContractId OriginatedLoanAgreement), [ContractId Effect])
      with today : Date
      controller loanAgreement.agent
      do
        let parties = Set.fromList (signatory this)
            updateEvent = clockUpdateEvent parties parties today
        updateEventCid <- toInterfaceContractId <$> create updateEvent
        (optionalNewBondKey, effects) <- exercise lifecycleRule Lifecycle.Evolve with
            eventCid = updateEventCid
            instrument = bondKey
            observableCids = []
        newThis <- forA optionalNewBondKey $ \newBondKey -> create this with
          bondKey = newBondKey
        pure (newThis, effects)

-- Need to provide some proof to P that A gave the loan amount to the same B that was underwritten. Can we do this without revealing B's identity?

-- NOTE: pays to agent for now. TODO: pay to participants
loanAgreementToBondCreate
  :  Time -- Current time
  -> InstrumentKey -- USD
  -> LoanAgreement
  -> FixedRate.Create
loanAgreementToBondCreate now usd a =
  FixedRate.Create with
    fixedRate = FixedRate with
      instrument = InstrumentKey with
        depository = a.borrower -- a.agent -- TODO: A bit odd
        issuer = a.borrower
        id = Id a.uuid
        version = "0"
      description = "Fixed-rate bond"
      couponRate = unRatePerAnnum a.loanTerms.rate
      periodicSchedule = a.loanTerms.schedule
      holidayCalendarIds = [] -- NOT USED!
      calendarDataProvider = a.agent -- NOT USED!
      dayCountConvention = Act365Fixed -- TODO: how does this impact servicing rules?
      currency = usd
      lastEventTimestamp = now
    observers = Map.fromList [("lenders", Set.fromList (Map.keys a.participantsWithAmounts)), ("agent", Set.singleton a.agent)]

-- | Create a schedule for periodic payments.
createPaymentPeriodicSchedule : Date -> [Text] -> Cal.BusinessDayConventionEnum -> PeriodEnum ->
  Int -> Date -> Date -> PeriodicSchedule
createPaymentPeriodicSchedule firstCouponDate holidayCalendarIds businessDayConvention couponPeriod
  couponPeriodMultiplier issueDate maturityDate = do
    -- CREATE_PERIODIC_SCHEDULE_BEGIN
    let
      (_y, _m, d) = toGregorian firstCouponDate
      periodicSchedule = PeriodicSchedule with
        businessDayAdjustment =
          Cal.BusinessDayAdjustment with
            calendarIds = holidayCalendarIds
            convention = businessDayConvention
        effectiveDateBusinessDayAdjustment = None
        terminationDateBusinessDayAdjustment = None
        frequency =
          Sched.Periodic Sched.Frequency with
            rollConvention = DOM d
            period = Period with
              period = couponPeriod
              periodMultiplier = couponPeriodMultiplier
        effectiveDate = issueDate
        firstRegularPeriodStartDate = Some firstCouponDate
        lastRegularPeriodEndDate = Some maturityDate
        stubPeriodType = None
        terminationDate = maturityDate
    -- CREATE_PERIODIC_SCHEDULE_END
    periodicSchedule

instance Display PendingLoanAgreement where
  display PendingLoanAgreement{..} = show loanAgreement.agent <> " has collected signatures from " <> T.intercalate ", " (fmap show signed) <> " for the final agreement"

instance Display OriginatedLoanAgreement where
  display OriginatedLoanAgreement{..} = show loanAgreement.agent <> " has finished collecting all signatures for the final agreement, and is now processing settlement of the agreement"
