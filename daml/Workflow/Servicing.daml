module Workflow.Servicing where

import DA.Set qualified as Set
import DA.Map qualified as Map
import Daml.Finance.Claims.Lifecycle.Rule qualified as Lifecycle (Rule(..))
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, Id(..), Parties)
import Daml.Finance.Data.Time.DateClock (DateClock(..))
import Daml.Finance.Data.Time.DateClockUpdate (DateClockUpdateEvent(..))
import Daml.Finance.Data.Time.DateClock.Types (Unit(..))
import Daml.Finance.Interface.Types.Date.Classes (toUTCTime)
import qualified Daml.Finance.Interface.Lifecycle.Rule.Lifecycle as Lifecycle
import Daml.Finance.Interface.Lifecycle.Effect (Effect)

-- | Given a `Date`, it creates a `DateClockUpdateEvent`.
clockUpdateEvent : Parties -> Parties -> Date -> DateClockUpdateEvent
clockUpdateEvent providers observers today = do
  let
    description = show today
    id = Id description
    date = Unit today
    clock = DateClock with providers; date; id; description; observers
   in DateClockUpdateEvent with
        providers
        id
        description
        date = today
        observers
        eventTime = toUTCTime date

template LoanServicing
  with
    borrower : Party
    lender : Party
    agent : Party
    bond : InstrumentKey
  where
    signatory borrower, lender, agent
    choice Lifecycle : (ContractId LoanServicing, [ContractId Effect])
      with today : Date
      controller agent
      do
        let parties = Set.fromList [borrower, lender, agent]
            updateEvent = clockUpdateEvent parties parties today
        updateEventCid <- toInterfaceContractId <$> create updateEvent
        -- NB: We create this rule in-place, we should almost certainly make it when we create the bond.
        rule <- fmap (toInterfaceContractId @Lifecycle.Lifecycle) $
          create $ Lifecycle.Rule with
            providers = Set.singleton agent
            observers = Map.empty
            lifecycler = agent
            id = Id "LifecycleRule"
            description = "Rule to lifecycle the bond instrument"
        (newBondOpt, effectCids) <- exercise rule Lifecycle.Evolve with
          eventCid = updateEventCid
          observableCids = []
          instrument = bond
        newServicing <- case newBondOpt of
          None -> create this
          Some newBond ->
            create this with
              borrower
              lender
              agent
              bond = newBond
        return (newServicing, effectCids)
