module Workflow.SettlementProposal
  ( SettlementProposal(..)
  , Add_Signature(..)
  , Settle(..)
  , ExecuteSettlement(..)
  )
  where

import DA.Functor
import DA.List (sort)
import DA.Map qualified as Map
import DA.Set qualified as Set

import Daml.Finance.Interface.Holding.Base qualified as Base
import Daml.Finance.Interface.Settlement.Batch qualified as Batch
import Daml.Finance.Interface.Settlement.Factory qualified as Settlement
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (I)
import Daml.Finance.Interface.Settlement.RouteProvider qualified as RouteProvider
import Daml.Finance.Interface.Settlement.Types (RoutedStep, Step(..))
import Daml.Finance.Interface.Types.Common.Types

import Workflow.Origination

-- This template is used to accumulate the signatures of all parties, generate transaction steps, and execute the batched transactions atomically
template SettlementProposal
  with
    loan : OriginatedLoanAgreement
    sigAccumulator: [Party] -- Acquire acceptance from all parties
    routeProviderCid : ContractId RouteProvider.I
    settlementFactoryCid : ContractId Settlement.F
    bond : InstrumentKey
    settled : Bool -- Has the 'Settle' been exercised already?
  where
    signatory loan.loanAgreement.agent::sigAccumulator
    observer loan.loanAgreement.borrower::(map fst $ Map.toList loan.loanAgreement.participantsWithAmounts)

    choice Settle : (ContractId SettlementProposal, (ContractId Batch.I, [ContractId Instruction.I]))
      controller loan.loanAgreement.borrower
      do
        let allParties = loan.loanAgreement.borrower :: Map.keys loan.loanAgreement.participantsWithAmounts
        assertMsg "Already settled" $ not settled
        assertMsg ("Missing signatures. Expected: " <> show allParties <> ", found: " <> show sigAccumulator) $
          sort sigAccumulator == sort allParties
        let id = this.loan.loanAgreement.uuid
        newCid <- create this with settled = True
        res <- settleTransactions loan.loanAgreement allParties id routeProviderCid settlementFactoryCid bond
        pure (newCid, res)

    choice Add_Signature : ContractId SettlementProposal
      with
        party : Party
      controller party
      do
        let allParties = loan.loanAgreement.borrower :: Map.keys loan.loanAgreement.participantsWithAmounts
        assertMsg ("Not an authorized party: " <> show party) $ elem party allParties
        create this with sigAccumulator = party :: sigAccumulator

    choice Decline : ()
      -- ^ Decline the request.
      controller loan.loanAgreement.borrower :: Map.keys loan.loanAgreement.participantsWithAmounts
      do pure ()

    choice Withdraw : ()
      -- ^ Withdraw the request.
      controller loan.loanAgreement.agent
      do pure ()
    choice ExecuteSettlement : [ContractId Base.Base]
      with
        batchCid : ContractId Batch.I
      controller loan.loanAgreement.agent
      do
        let allParties = loan.loanAgreement.borrower :: Map.keys loan.loanAgreement.participantsWithAmounts
        assertMsg "All signatures must be received before executing settlement." $ sort sigAccumulator ==  (sort allParties)
        exercise batchCid Batch.Settle with
          actors = Set.singleton loan.loanAgreement.agent

settleTransactions :
  (HasField "agent" r1 Party
  , HasField "amount" r2 (Numeric 10)
  , HasField "borrower" r1 Party
  , HasField "instrument" r2 InstrumentKey
  , HasField "loanTerms" r1 r2
  , HasField "participantsWithAmounts" r1 (Map.Map Party (Numeric 10))
  , HasExercise t1 RouteProvider.Discover [RoutedStep]
  , HasExercise t2 Settlement.Instruct (a, [c])
  )
  => r1
  -> [Party]
  -> Text -- ^ Loan Agreement UUID
  -> ContractId t1 -- ^ ContractId RouteProvider
  -> ContractId t2 -- ^ ContractId Settlement.Factory
  -> InstrumentKey -- ^ Bond
  -> Update (a , [c])
settleTransactions loan lendersAndBorrowers id routeProviderCid settlementFactoryCid bondInstrumentKey = do
  -- Settlement of lenders (USD)
      -- Lenders scheduled sending of funds to Agent.
  let stepsFromLenderUsd = (Map.toList loan.participantsWithAmounts) <&> \(lender, investAmount) ->
        Step with
          sender = lender
          receiver = loan.agent
          quantity = Quantity loan.loanTerms.instrument investAmount
      -- Agent schedules sending of funds to Borrower.
      stepsToBorrowerUsd =
        Step with
          sender = loan.agent
          receiver = loan.borrower
          quantity = Quantity loan.loanTerms.instrument loan.loanTerms.amount
      stepsUsd = stepsFromLenderUsd <> [stepsToBorrowerUsd]
  -- Settlement of lenders (bond)
      -- Agent sends Bonds to Lenders.
  let stepsBond = (Map.toList loan.participantsWithAmounts) <&> \(lender, investAmount) ->
        Step with
          sender = loan.borrower
          receiver = lender
          quantity = Quantity bondInstrumentKey investAmount

  -- Discover settlement routes for the steps
  routedSteps <- exercise routeProviderCid RouteProvider.Discover with
    discoverors = Set.fromList $ lendersAndBorrowers
    contextId = None
    steps = stepsUsd <> stepsBond

  -- Instruct settlement
  exercise settlementFactoryCid Settlement.Instruct with
      instructors = Set.fromList $ lendersAndBorrowers
      settlers = Set.singleton loan.agent
      id = Id id
      description = "Settlement for " <> id
      contextId = None
      routedSteps
      settlementTime = None -- i.e., immediate settlement
