module Workflow.SettlementProposal where

import DA.Functor
import DA.List (sort)
import qualified DA.Map as Map
import Daml.Finance.Interface.Types.Common.Types

import qualified Daml.Finance.Interface.Settlement.RouteProvider as RouteProvider
import qualified DA.Set as S

import qualified Daml.Finance.Interface.Settlement.Factory as Settlement

import Daml.Finance.Interface.Settlement.Batch qualified as Batch (I)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (I)
import Daml.Finance.Interface.Settlement.Types (RoutedStep, Step(..))
import DA.Set (singleton)

import Workflow.Origination

template SettlementProposal
  with
    loan : LoanAgreement
    sigAccumulator: [Party] -- Acquire acceptance from all parties
    routeProviderCid : ContractId RouteProvider.I
    settlementFactoryCid : ContractId Settlement.F
  where
    signatory loan.agent
    observer loan.borrower::(map fst $ Map.toList loan.participantsWithAmounts)
    choice Accept_Borrower : Either (ContractId SettlementProposal) (ContractId Batch.I, [ContractId Instruction.I])
      controller loan.borrower
      do
        let lendersAndBorrowers = loan.borrower::(map fst $ Map.toList loan.participantsWithAmounts)
            id = "settlement-" <> (show settlementFactoryCid) <> "-" <> (show routeProviderCid)
        if (sort sigAccumulator) == (sort lendersAndBorrowers) then do
          settleTransactions loan lendersAndBorrowers id routeProviderCid settlementFactoryCid
        else do
          updatedContract <- create this with sigAccumulator = loan.borrower::sigAccumulator
          return $ Left updatedContract
    choice Accept_Lender : Either (ContractId SettlementProposal) (ContractId Batch.I, [ContractId Instruction.I])
      with
        currLender : Party
      controller (map fst $ Map.toList loan.participantsWithAmounts)
      do
        let lendersAndBorrowers : [Party] = loan.borrower::(map fst $ Map.toList loan.participantsWithAmounts)
            id = "settlement-" <> (show settlementFactoryCid) <> "-" <> (show routeProviderCid)
        if sigAccumulator == loan.borrower::(map fst $ Map.toList loan.participantsWithAmounts) then do
          settleTransactions loan lendersAndBorrowers id routeProviderCid settlementFactoryCid

        -- add the current choice controller to the list of acquired signatures
        else do
          updatedContract <- create this with sigAccumulator = currLender::sigAccumulator
          return $ Left updatedContract

    choice Decline : ()
      -- ^ Decline the request.
      controller loan.borrower::(map fst $ Map.toList loan.participantsWithAmounts)
      do pure ()

    choice Withdraw : ()
      -- ^ Withdraw the request.
      controller loan.agent
      do pure ()

settleTransactions :
  (HasField "agent" r1 Party
  , HasField "amount" r2 (Numeric 10)
  , HasField "borrower" r1 Party
  , HasField "instrument" r2 InstrumentKey
  , HasField "loanTerms" r1 r2
  , HasField "participantsWithAmounts" r1 (Map.Map Party (Numeric 10))
  , HasExercise t1 RouteProvider.Discover [RoutedStep]
  , HasExercise t2 Settlement.Instruct (a, [c])
  )
  => r1 -> [Party] -> Text -> ContractId t1 -> ContractId t2 -> Update (Either (ContractId SettlementProposal) (a , [c]))
settleTransactions loan lendersAndBorrowers id routeProviderCid settlementFactoryCid = do
  -- Settlement of lenders
  let lenderSteps = (Map.toList loan.participantsWithAmounts) <&> \(lender, investAmount) ->
        Step with sender = lender; receiver = loan.agent; quantity = Quantity loan.loanTerms.instrument investAmount
  -- Settlement of borrower
      borrowerStep =
        Step with sender = loan.agent; receiver = loan.borrower; quantity = Quantity loan.loanTerms.instrument loan.loanTerms.amount

  -- Discover settlement routes for the steps
  routedSteps <- exercise routeProviderCid RouteProvider.Discover with
    discoverors = S.fromList $ loan.agent::lendersAndBorrowers
    contextId = None
    steps = borrowerStep::lenderSteps

  -- Instruct settlement
  instructRes <- exercise settlementFactoryCid Settlement.Instruct with
      instructors = S.fromList $ loan.agent::lendersAndBorrowers
      settlers = singleton loan.agent
      id = Id id
      description = "Settlement for " <> id
      contextId = None
      routedSteps
      settlementTime = None -- i.e., immediate settlement

  return $ Right instructRes
