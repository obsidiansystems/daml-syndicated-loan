module Workflow.Util where

import Daml.Script

-- INTERFACE DEPENDENCIES --
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument
import Daml.Finance.Interface.Types.Common.Types (Parties, AccountKey, Id(..), InstrumentKey(..))

-- IMPLEMENTATION DEPENDENCIES --
import Daml.Finance.Instrument.Bond.FixedRate.Instrument qualified as FR
--import Daml.Finance.Interface.Instrument.Bond.FixedRate.Instrument qualified as FR

import Scripts.Transfer (TransferState(..), runTransfer)

import DA.Date (Month(..), date, toGregorian)
import DA.Map qualified as M (fromList)
import Daml.Finance.Interface.Types.Date.Calendar qualified as Cal
import Daml.Finance.Interface.Types.Date.DayCount (DayCountConventionEnum(..))
import Daml.Finance.Interface.Types.Date.RollConvention (Period(..), PeriodEnum(..), RollConventionEnum(..))
import Daml.Finance.Interface.Types.Date.Schedule qualified as Sched
import Daml.Finance.Interface.Types.Date.Schedule (PeriodicSchedule(..))
import Daml.Finance.Data.Time.DateClock.Types qualified as DateClock
import Daml.Finance.Interface.Types.Date.Classes

import qualified Daml.Finance.Interface.Instrument.Base.Instrument as BaseInstrument
import Workflow.Origination

createReference : ContractId BaseInstrument.I -> Party -> Party -> [(Text, Parties)] ->
  Script InstrumentKey
createReference cid depository issuer observers = do
  instrumentView <- submitMulti [depository, issuer] [] do
    exerciseCmd cid BaseInstrument.GetView with viewer = issuer
  let ref = BaseInstrument.Reference with instrumentView; cid; observers = M.fromList observers
  submitMulti [depository, issuer] [] do createCmd ref
  pure $ key ref

createBond : Bond -> Update (InstrumentKey, ContractId BaseInstrument.I)
createBond bond = do
  bondCid <- toInterfaceContractId @BaseInstrument.I <$> submit agent_charlie do
    createCmd bond
  bondRef <- createReference bondCid bond.depository bond.issuer bond.observers
  return (bondRef, bondCid)
  